// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/eztrade/kpi/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Attachment struct {
		Filename func(childComplexity int) int
		ID       func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	BrandList struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	BrandListResponse struct {
		Data    func(childComplexity int) int
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Customer struct {
		Brand        func(childComplexity int) int
		Competitor   func(childComplexity int) int
		CustomerID   func(childComplexity int) int
		CustomerName func(childComplexity int) int
		Product      func(childComplexity int) int
		Promotion    func(childComplexity int) int
		Survey       func(childComplexity int) int
	}

	CustomerContact struct {
		ContactImage  func(childComplexity int) int
		ContactName   func(childComplexity int) int
		ContactNumber func(childComplexity int) int
		CustomerID    func(childComplexity int) int
		CustomerName  func(childComplexity int) int
		Designation   func(childComplexity int) int
		EmailID       func(childComplexity int) int
		HasConsent    func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	CustomerData struct {
		CustomerID           func(childComplexity int) int
		CustomerName         func(childComplexity int) int
		ShipTo               func(childComplexity int) int
		SoldTo               func(childComplexity int) int
		TeamMemberCustomerID func(childComplexity int) int
	}

	CustomerDataDropDown struct {
		CustomerID           func(childComplexity int) int
		CustomerName         func(childComplexity int) int
		ShipTo               func(childComplexity int) int
		SoldTo               func(childComplexity int) int
		TeamMemberCustomerID func(childComplexity int) int
	}

	CustomerGroup struct {
		CustomeDetails func(childComplexity int) int
		InDusTrialCode func(childComplexity int) int
	}

	CustomerGroupResponse struct {
		CustoMerData func(childComplexity int) int
		Error        func(childComplexity int) int
		Message      func(childComplexity int) int
	}

	CustomerList struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CustomerListResponse struct {
		Data    func(childComplexity int) int
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CustomerTaskFeedBackResponse struct {
		Error            func(childComplexity int) int
		Message          func(childComplexity int) int
		ValidationErrors func(childComplexity int) int
	}

	GetCustomerContactResponse struct {
		GetCustomerContact func(childComplexity int) int
	}

	GetKpi struct {
		BrandDesign         func(childComplexity int) int
		BrandKpiID          func(childComplexity int) int
		BrandKpiVersionID   func(childComplexity int) int
		EffectiveMonth      func(childComplexity int) int
		EffectiveYear       func(childComplexity int) int
		IsPriority          func(childComplexity int) int
		KpiName             func(childComplexity int) int
		ParentKpiID         func(childComplexity int) int
		ProductDesign       func(childComplexity int) int
		ProductKpiID        func(childComplexity int) int
		ProductKpiVersionID func(childComplexity int) int
		TargetBrand         func(childComplexity int) int
		TargetProduct       func(childComplexity int) int
		TargetTeamID        func(childComplexity int) int
		TargetTeamName      func(childComplexity int) int
	}

	GetKpiAnswerResponse struct {
		Error           func(childComplexity int) int
		ErrorCode       func(childComplexity int) int
		GetAnswers      func(childComplexity int) int
		IsOldAnswer     func(childComplexity int) int
		IsProposedStock func(childComplexity int) int
		Message         func(childComplexity int) int
	}

	GetKpiBrandProductResponse struct {
		Brands    func(childComplexity int) int
		Error     func(childComplexity int) int
		ErrorCode func(childComplexity int) int
		Message   func(childComplexity int) int
	}

	GetKpiOffline struct {
		BrandDesign         func(childComplexity int) int
		BrandKpiID          func(childComplexity int) int
		BrandKpiVersionID   func(childComplexity int) int
		EffectiveMonth      func(childComplexity int) int
		EffectiveYear       func(childComplexity int) int
		IsPriority          func(childComplexity int) int
		KpiName             func(childComplexity int) int
		ParentKpiID         func(childComplexity int) int
		ProductDesign       func(childComplexity int) int
		ProductKpiID        func(childComplexity int) int
		ProductKpiVersionID func(childComplexity int) int
		TargetBrand         func(childComplexity int) int
		TargetProduct       func(childComplexity int) int
		TargetTeamID        func(childComplexity int) int
		TargetTeamName      func(childComplexity int) int
	}

	GetKpiResponse struct {
		Data      func(childComplexity int) int
		Error     func(childComplexity int) int
		ErrorCode func(childComplexity int) int
		Message   func(childComplexity int) int
		TotalPage func(childComplexity int) int
	}

	GetKpiTargetResponse struct {
		Error      func(childComplexity int) int
		GetTargets func(childComplexity int) int
		Message    func(childComplexity int) int
	}

	GetTargetCustomerResponse struct {
		Data      func(childComplexity int) int
		Error     func(childComplexity int) int
		Message   func(childComplexity int) int
		TotalPage func(childComplexity int) int
		URL       func(childComplexity int) int
	}

	Images struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	KPIAnswerRes struct {
		QuestioNnumber func(childComplexity int) int
		Value          func(childComplexity int) int
	}

	KPIDesignRes struct {
		Active             func(childComplexity int) int
		Category           func(childComplexity int) int
		CategoryID         func(childComplexity int) int
		EffectiveEndDate   func(childComplexity int) int
		EffectiveStartDate func(childComplexity int) int
		Name               func(childComplexity int) int
		Questions          func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	KPIQuestionRes struct {
		Active         func(childComplexity int) int
		OptionValues   func(childComplexity int) int
		QuestionNumber func(childComplexity int) int
		Required       func(childComplexity int) int
		Title          func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	KpiAnswer struct {
		Answer               func(childComplexity int) int
		Category             func(childComplexity int) int
		ID                   func(childComplexity int) int
		KpiID                func(childComplexity int) int
		KpiVersionID         func(childComplexity int) int
		ScheduleEvent        func(childComplexity int) int
		TargetItem           func(childComplexity int) int
		TeamMemberCustomerID func(childComplexity int) int
	}

	KpiBrandItem struct {
		BrandID   func(childComplexity int) int
		BrandName func(childComplexity int) int
		Products  func(childComplexity int) int
	}

	KpiBrandItemOffline struct {
		BrandID           func(childComplexity int) int
		BrandKpiAnswer    func(childComplexity int) int
		BrandKpiVersionID func(childComplexity int) int
		BrandName         func(childComplexity int) int
		Products          func(childComplexity int) int
	}

	KpiOfflineResponse struct {
		Error                 func(childComplexity int) int
		ErrorCode             func(childComplexity int) int
		GetKpiOffline         func(childComplexity int) int
		KpiProductBrandAnswer func(childComplexity int) int
		Message               func(childComplexity int) int
	}

	KpiProductBrandAnswer struct {
		Brands         func(childComplexity int) int
		EventID        func(childComplexity int) int
		TeamCustomerID func(childComplexity int) int
	}

	KpiProductItem struct {
		IsPriority          func(childComplexity int) int
		MaterialDescription func(childComplexity int) int
		PrincipalName       func(childComplexity int) int
		ProductID           func(childComplexity int) int
		TeamProductID       func(childComplexity int) int
	}

	KpiProductItemOffline struct {
		IsPriority          func(childComplexity int) int
		MaterialDescription func(childComplexity int) int
		PrincipalName       func(childComplexity int) int
		ProductID           func(childComplexity int) int
		ProductKpiAnswer    func(childComplexity int) int
		ProductKpiVersionID func(childComplexity int) int
		TeamID              func(childComplexity int) int
		TeamProductID       func(childComplexity int) int
	}

	KpiTaregetTitleResponse struct {
		Error           func(childComplexity int) int
		KpiTargetTitles func(childComplexity int) int
		Message         func(childComplexity int) int
	}

	KpiTarget struct {
		Bergu    func(childComplexity int) int
		Country  func(childComplexity int) int
		Currency func(childComplexity int) int
		ID       func(childComplexity int) int
		Plants   func(childComplexity int) int
		Region   func(childComplexity int) int
		SalesRep func(childComplexity int) int
		Status   func(childComplexity int) int
		Target   func(childComplexity int) int
		TeamName func(childComplexity int) int
		Year     func(childComplexity int) int
	}

	KpiTargetRes struct {
		KpiTitle func(childComplexity int) int
		KpiValue func(childComplexity int) int
		Values   func(childComplexity int) int
	}

	KpiTargetTitle struct {
		Description func(childComplexity int) int
		Title       func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	Mutation struct {
		ActionKpiTarget            func(childComplexity int, input model.ActionKPITargetInput) int
		DeleteCustomerContact      func(childComplexity int, input model.CustomerContactDeleteRequest) int
		InsertCustomerTaskFeedBack func(childComplexity int, input model.CustomerTaskFeedBackInput) int
		SaveCustomerTarget         func(childComplexity int, input model.CustomerTargetInput) int
		SaveKpi                    func(childComplexity int, input model.UpsertKpiRequest) int
		SaveKpiAnswers             func(childComplexity int, input model.KpiAnswerRequest) int
		UpsertCustomerContact      func(childComplexity int, input model.CustomerContactRequest) int
		UpsertFlashBulletin        func(childComplexity int, input model.FlashBulletinUpsertInput) int
		UpsertKpiTarget            func(childComplexity int, input model.KPITargetInput) int
		UpsertTaskBulletin         func(childComplexity int, input model.TaskBulletinUpsertInput) int
	}

	PrincipalDropDownResponse struct {
		Data    func(childComplexity int) int
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ProductList struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ProductListResponse struct {
		Data    func(childComplexity int) int
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Query struct {
		FetchCustomerFeedback       func(childComplexity int, input model.FetchCustomerFeedbackInput) int
		GetCustomerGroup            func(childComplexity int, input *model.CustomerGroupInput) int
		GetGetCustomerContacts      func(childComplexity int, input *model.GetCustomerContactRequest) int
		GetKpiAnswers               func(childComplexity int, input *model.GetKpiAnswerRequest) int
		GetKpiBrandProduct          func(childComplexity int, input model.GetBrandProductRequest) int
		GetKpiQuestionAnswerOffline func(childComplexity int, input model.KpiOfflineInput) int
		GetKpiTargetTitle           func(childComplexity int) int
		GetKpiTargets               func(childComplexity int, input *model.GetKpiTargetRequest) int
		GetKpis                     func(childComplexity int, input *model.GetKpiInput) int
		GetTargetCustomer           func(childComplexity int, input model.GetTargetCustomerRequest) int
		ListFlashbulletin           func(childComplexity int, input model.ListFlashBulletinInput) int
		ListTaskBulletin            func(childComplexity int, input *model.ListTaskBulletinInput) int
		PrincipalDropDown           func(childComplexity int, input model.PrincipalDropDownInput) int
		RetrievePictureBrandList    func(childComplexity int, input *model.ListInput) int
		RetrievePictureCustomerList func(childComplexity int, input *model.ListInput) int
		RetrievePictureProductList  func(childComplexity int, input *model.ListInput) int
		RetrievePictureZip          func(childComplexity int, input model.PictureZipInput) int
		RetrievePictures            func(childComplexity int, input model.PicturesInput) int
		RetriveFlashBulletinSingle  func(childComplexity int, input model.RetriveInfoFlashBulletinInput) int
		TaskBuletinReport           func(childComplexity int, input model.TaskBulletinReportInput) int
		TaskBulletinTitleDropDown   func(childComplexity int, input *model.TaskBulletinTitleInput) int
		TeamToCustomerDropDown      func(childComplexity int, input *model.TaskBulletinInput) int
		Todos                       func(childComplexity int) int
	}

	Recipients struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	RetrievePictureZip struct {
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
		URL     func(childComplexity int) int
	}

	RetrievePicturesResponse struct {
		Data    func(childComplexity int) int
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	SalesRepData struct {
		ActiveDirectory    func(childComplexity int) int
		ApprovalRoleTitle  func(childComplexity int) int
		ApprovalRoleValues func(childComplexity int) int
		Customers          func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		LastName           func(childComplexity int) int
		TeamMemberID       func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	SalesRepDataDropDown struct {
		ActiveDirectory    func(childComplexity int) int
		ApprovalRoleTitle  func(childComplexity int) int
		ApprovalRoleValues func(childComplexity int) int
		Customers          func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		LastName           func(childComplexity int) int
		TeamMemberID       func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	Target struct {
		Month func(childComplexity int) int
		Value func(childComplexity int) int
	}

	TargetCustomer struct {
		Category         func(childComplexity int) int
		CustomerTargetID func(childComplexity int) int
		ProductBrandID   func(childComplexity int) int
		ProductBrandName func(childComplexity int) int
		Targets          func(childComplexity int) int
		Type             func(childComplexity int) int
		Year             func(childComplexity int) int
	}

	TargetValueRes struct {
		Month func(childComplexity int) int
		Value func(childComplexity int) int
	}

	TaskBulletinResponse struct {
		DropDown func(childComplexity int) int
		Error    func(childComplexity int) int
		Message  func(childComplexity int) int
	}

	TaskBulletinTitleResponse struct {
		Error       func(childComplexity int) int
		Message     func(childComplexity int) int
		TypeDetails func(childComplexity int) int
	}

	TaskBulletinUpsertResponse struct {
		Error            func(childComplexity int) int
		Message          func(childComplexity int) int
		ValidationErrors func(childComplexity int) int
	}

	TaskReportOutput struct {
		Error   func(childComplexity int) int
		Message func(childComplexity int) int
		URL     func(childComplexity int) int
		Values  func(childComplexity int) int
	}

	TeamMemberDropdown struct {
		Employee func(childComplexity int) int
		TeamID   func(childComplexity int) int
		TeamName func(childComplexity int) int
	}

	Teams struct {
		Customers func(childComplexity int) int
		TeamID    func(childComplexity int) int
		TeamName  func(childComplexity int) int
	}

	WeeklyFeedback struct {
		Attachments   func(childComplexity int) int
		Remarks       func(childComplexity int) int
		Status        func(childComplexity int) int
		WeekDateValue func(childComplexity int) int
		WeekNumber    func(childComplexity int) int
	}

	CustomerFeedback struct {
		Attachments func(childComplexity int) int
		DateCreated func(childComplexity int) int
		Remarks     func(childComplexity int) int
		StatusTitle func(childComplexity int) int
		StatusValue func(childComplexity int) int
	}

	CustomerResponse struct {
		CustoMerID   func(childComplexity int) int
		CustoMerName func(childComplexity int) int
		ShipTo       func(childComplexity int) int
		SoldTo       func(childComplexity int) int
	}

	FetchCustomerFeedbackResponse struct {
		CustomerFeedback func(childComplexity int) int
		Error            func(childComplexity int) int
		Message          func(childComplexity int) int
	}

	FlashBulletin struct {
		Attachments  func(childComplexity int) int
		Description  func(childComplexity int) int
		ID           func(childComplexity int) int
		Recipients   func(childComplexity int) int
		Title        func(childComplexity int) int
		Type         func(childComplexity int) int
		ValidityDate func(childComplexity int) int
	}

	FlashBulletinData struct {
		Attachments  func(childComplexity int) int
		CreatedDate  func(childComplexity int) int
		Description  func(childComplexity int) int
		EndDate      func(childComplexity int) int
		ID           func(childComplexity int) int
		ModifiedDate func(childComplexity int) int
		StartDate    func(childComplexity int) int
		Status       func(childComplexity int) int
		Title        func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	FlashBulletinResponse struct {
		Error            func(childComplexity int) int
		Message          func(childComplexity int) int
		ValidationErrors func(childComplexity int) int
	}

	FlashBulletinUpsertResponse struct {
		Error            func(childComplexity int) int
		Message          func(childComplexity int) int
		ValidationErrors func(childComplexity int) int
	}

	KpiResponse struct {
		Error            func(childComplexity int) int
		ErrorCode        func(childComplexity int) int
		Message          func(childComplexity int) int
		ValidationErrors func(childComplexity int) int
	}

	ListFlashBulletinResponse struct {
		Error          func(childComplexity int) int
		FlashBulletins func(childComplexity int) int
		Message        func(childComplexity int) int
	}

	ListTaskBulletinResponse struct {
		Error         func(childComplexity int) int
		Message       func(childComplexity int) int
		TaskBulletins func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	PrincipalDropDownData struct {
		PrincipalName func(childComplexity int) int
	}

	RetriveInfoFlashBulletinleResponse struct {
		Error             func(childComplexity int) int
		FlashBulletinData func(childComplexity int) int
		Message           func(childComplexity int) int
	}

	TaskBulletinData struct {
		Attachments   func(childComplexity int) int
		CreationDate  func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		PrincipalName func(childComplexity int) int
		SalesRep      func(childComplexity int) int
		TargetDate    func(childComplexity int) int
		TeamID        func(childComplexity int) int
		TeamName      func(childComplexity int) int
		Title         func(childComplexity int) int
		TypeTitle     func(childComplexity int) int
		TypeValue     func(childComplexity int) int
	}

	TaskReport struct {
		ActiveDirectory func(childComplexity int) int
		BulletinTitle   func(childComplexity int) int
		BulletinType    func(childComplexity int) int
		CreationDate    func(childComplexity int) int
		CustomerName    func(childComplexity int) int
		PrincipalName   func(childComplexity int) int
		TargetDate      func(childComplexity int) int
		TeamName        func(childComplexity int) int
		UserName        func(childComplexity int) int
		WeeklyFeedback  func(childComplexity int) int
	}

	TitleValue struct {
		Type func(childComplexity int) int
	}

	ValidationMessage struct {
		ErrorCode func(childComplexity int) int
		Message   func(childComplexity int) int
		Row       func(childComplexity int) int
	}

	ValidationResult struct {
		Error               func(childComplexity int) int
		ValidationMessage   func(childComplexity int) int
		ValidationTimeTaken func(childComplexity int) int
	}
}

type MutationResolver interface {
	SaveCustomerTarget(ctx context.Context, input model.CustomerTargetInput) (*model.KpiResponse, error)
	UpsertFlashBulletin(ctx context.Context, input model.FlashBulletinUpsertInput) (*model.FlashBulletinUpsertResponse, error)
	UpsertCustomerContact(ctx context.Context, input model.CustomerContactRequest) (*model.KpiResponse, error)
	DeleteCustomerContact(ctx context.Context, input model.CustomerContactDeleteRequest) (*model.KpiResponse, error)
	SaveKpi(ctx context.Context, input model.UpsertKpiRequest) (*model.KpiResponse, error)
	SaveKpiAnswers(ctx context.Context, input model.KpiAnswerRequest) (*model.KpiResponse, error)
	UpsertKpiTarget(ctx context.Context, input model.KPITargetInput) (*model.KpiResponse, error)
	ActionKpiTarget(ctx context.Context, input model.ActionKPITargetInput) (*model.KpiResponse, error)
	UpsertTaskBulletin(ctx context.Context, input model.TaskBulletinUpsertInput) (*model.TaskBulletinUpsertResponse, error)
	InsertCustomerTaskFeedBack(ctx context.Context, input model.CustomerTaskFeedBackInput) (*model.CustomerTaskFeedBackResponse, error)
}
type QueryResolver interface {
	Todos(ctx context.Context) ([]string, error)
	GetTargetCustomer(ctx context.Context, input model.GetTargetCustomerRequest) (*model.GetTargetCustomerResponse, error)
	GetCustomerGroup(ctx context.Context, input *model.CustomerGroupInput) (*model.CustomerGroupResponse, error)
	GetGetCustomerContacts(ctx context.Context, input *model.GetCustomerContactRequest) (*model.GetCustomerContactResponse, error)
	GetKpiBrandProduct(ctx context.Context, input model.GetBrandProductRequest) (*model.GetKpiBrandProductResponse, error)
	GetKpis(ctx context.Context, input *model.GetKpiInput) (*model.GetKpiResponse, error)
	GetKpiQuestionAnswerOffline(ctx context.Context, input model.KpiOfflineInput) (*model.KpiOfflineResponse, error)
	GetKpiAnswers(ctx context.Context, input *model.GetKpiAnswerRequest) (*model.GetKpiAnswerResponse, error)
	GetKpiTargets(ctx context.Context, input *model.GetKpiTargetRequest) (*model.GetKpiTargetResponse, error)
	GetKpiTargetTitle(ctx context.Context) (*model.KpiTaregetTitleResponse, error)
	RetriveFlashBulletinSingle(ctx context.Context, input model.RetriveInfoFlashBulletinInput) (*model.RetriveInfoFlashBulletinleResponse, error)
	ListFlashbulletin(ctx context.Context, input model.ListFlashBulletinInput) (*model.ListFlashBulletinResponse, error)
	RetrievePictures(ctx context.Context, input model.PicturesInput) (*model.RetrievePicturesResponse, error)
	RetrievePictureZip(ctx context.Context, input model.PictureZipInput) (*model.RetrievePictureZip, error)
	RetrievePictureCustomerList(ctx context.Context, input *model.ListInput) (*model.CustomerListResponse, error)
	RetrievePictureProductList(ctx context.Context, input *model.ListInput) (*model.ProductListResponse, error)
	RetrievePictureBrandList(ctx context.Context, input *model.ListInput) (*model.BrandListResponse, error)
	ListTaskBulletin(ctx context.Context, input *model.ListTaskBulletinInput) (*model.ListTaskBulletinResponse, error)
	FetchCustomerFeedback(ctx context.Context, input model.FetchCustomerFeedbackInput) (*model.FetchCustomerFeedbackResponse, error)
	TeamToCustomerDropDown(ctx context.Context, input *model.TaskBulletinInput) (*model.TaskBulletinResponse, error)
	PrincipalDropDown(ctx context.Context, input model.PrincipalDropDownInput) (*model.PrincipalDropDownResponse, error)
	TaskBulletinTitleDropDown(ctx context.Context, input *model.TaskBulletinTitleInput) (*model.TaskBulletinTitleResponse, error)
	TaskBuletinReport(ctx context.Context, input model.TaskBulletinReportInput) (*model.TaskReportOutput, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Attachment.filename":
		if e.complexity.Attachment.Filename == nil {
			break
		}

		return e.complexity.Attachment.Filename(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "Attachment.url":
		if e.complexity.Attachment.URL == nil {
			break
		}

		return e.complexity.Attachment.URL(childComplexity), true

	case "BrandList.id":
		if e.complexity.BrandList.ID == nil {
			break
		}

		return e.complexity.BrandList.ID(childComplexity), true

	case "BrandList.name":
		if e.complexity.BrandList.Name == nil {
			break
		}

		return e.complexity.BrandList.Name(childComplexity), true

	case "BrandListResponse.data":
		if e.complexity.BrandListResponse.Data == nil {
			break
		}

		return e.complexity.BrandListResponse.Data(childComplexity), true

	case "BrandListResponse.error":
		if e.complexity.BrandListResponse.Error == nil {
			break
		}

		return e.complexity.BrandListResponse.Error(childComplexity), true

	case "BrandListResponse.message":
		if e.complexity.BrandListResponse.Message == nil {
			break
		}

		return e.complexity.BrandListResponse.Message(childComplexity), true

	case "Customer.brand":
		if e.complexity.Customer.Brand == nil {
			break
		}

		return e.complexity.Customer.Brand(childComplexity), true

	case "Customer.competitor":
		if e.complexity.Customer.Competitor == nil {
			break
		}

		return e.complexity.Customer.Competitor(childComplexity), true

	case "Customer.customerID":
		if e.complexity.Customer.CustomerID == nil {
			break
		}

		return e.complexity.Customer.CustomerID(childComplexity), true

	case "Customer.customerName":
		if e.complexity.Customer.CustomerName == nil {
			break
		}

		return e.complexity.Customer.CustomerName(childComplexity), true

	case "Customer.product":
		if e.complexity.Customer.Product == nil {
			break
		}

		return e.complexity.Customer.Product(childComplexity), true

	case "Customer.promotion":
		if e.complexity.Customer.Promotion == nil {
			break
		}

		return e.complexity.Customer.Promotion(childComplexity), true

	case "Customer.survey":
		if e.complexity.Customer.Survey == nil {
			break
		}

		return e.complexity.Customer.Survey(childComplexity), true

	case "CustomerContact.contactImage":
		if e.complexity.CustomerContact.ContactImage == nil {
			break
		}

		return e.complexity.CustomerContact.ContactImage(childComplexity), true

	case "CustomerContact.contactName":
		if e.complexity.CustomerContact.ContactName == nil {
			break
		}

		return e.complexity.CustomerContact.ContactName(childComplexity), true

	case "CustomerContact.contactNumber":
		if e.complexity.CustomerContact.ContactNumber == nil {
			break
		}

		return e.complexity.CustomerContact.ContactNumber(childComplexity), true

	case "CustomerContact.customerId":
		if e.complexity.CustomerContact.CustomerID == nil {
			break
		}

		return e.complexity.CustomerContact.CustomerID(childComplexity), true

	case "CustomerContact.customerName":
		if e.complexity.CustomerContact.CustomerName == nil {
			break
		}

		return e.complexity.CustomerContact.CustomerName(childComplexity), true

	case "CustomerContact.designation":
		if e.complexity.CustomerContact.Designation == nil {
			break
		}

		return e.complexity.CustomerContact.Designation(childComplexity), true

	case "CustomerContact.emailId":
		if e.complexity.CustomerContact.EmailID == nil {
			break
		}

		return e.complexity.CustomerContact.EmailID(childComplexity), true

	case "CustomerContact.hasConsent":
		if e.complexity.CustomerContact.HasConsent == nil {
			break
		}

		return e.complexity.CustomerContact.HasConsent(childComplexity), true

	case "CustomerContact.id":
		if e.complexity.CustomerContact.ID == nil {
			break
		}

		return e.complexity.CustomerContact.ID(childComplexity), true

	case "CustomerData.customerID":
		if e.complexity.CustomerData.CustomerID == nil {
			break
		}

		return e.complexity.CustomerData.CustomerID(childComplexity), true

	case "CustomerData.customerName":
		if e.complexity.CustomerData.CustomerName == nil {
			break
		}

		return e.complexity.CustomerData.CustomerName(childComplexity), true

	case "CustomerData.shipTo":
		if e.complexity.CustomerData.ShipTo == nil {
			break
		}

		return e.complexity.CustomerData.ShipTo(childComplexity), true

	case "CustomerData.soldTo":
		if e.complexity.CustomerData.SoldTo == nil {
			break
		}

		return e.complexity.CustomerData.SoldTo(childComplexity), true

	case "CustomerData.teamMemberCustomerId":
		if e.complexity.CustomerData.TeamMemberCustomerID == nil {
			break
		}

		return e.complexity.CustomerData.TeamMemberCustomerID(childComplexity), true

	case "CustomerDataDropDown.customerID":
		if e.complexity.CustomerDataDropDown.CustomerID == nil {
			break
		}

		return e.complexity.CustomerDataDropDown.CustomerID(childComplexity), true

	case "CustomerDataDropDown.customerName":
		if e.complexity.CustomerDataDropDown.CustomerName == nil {
			break
		}

		return e.complexity.CustomerDataDropDown.CustomerName(childComplexity), true

	case "CustomerDataDropDown.shipTo":
		if e.complexity.CustomerDataDropDown.ShipTo == nil {
			break
		}

		return e.complexity.CustomerDataDropDown.ShipTo(childComplexity), true

	case "CustomerDataDropDown.soldTo":
		if e.complexity.CustomerDataDropDown.SoldTo == nil {
			break
		}

		return e.complexity.CustomerDataDropDown.SoldTo(childComplexity), true

	case "CustomerDataDropDown.teamMemberCustomerId":
		if e.complexity.CustomerDataDropDown.TeamMemberCustomerID == nil {
			break
		}

		return e.complexity.CustomerDataDropDown.TeamMemberCustomerID(childComplexity), true

	case "CustomerGroup.customeDetails":
		if e.complexity.CustomerGroup.CustomeDetails == nil {
			break
		}

		return e.complexity.CustomerGroup.CustomeDetails(childComplexity), true

	case "CustomerGroup.inDusTrialCode":
		if e.complexity.CustomerGroup.InDusTrialCode == nil {
			break
		}

		return e.complexity.CustomerGroup.InDusTrialCode(childComplexity), true

	case "CustomerGroupResponse.custoMerData":
		if e.complexity.CustomerGroupResponse.CustoMerData == nil {
			break
		}

		return e.complexity.CustomerGroupResponse.CustoMerData(childComplexity), true

	case "CustomerGroupResponse.error":
		if e.complexity.CustomerGroupResponse.Error == nil {
			break
		}

		return e.complexity.CustomerGroupResponse.Error(childComplexity), true

	case "CustomerGroupResponse.message":
		if e.complexity.CustomerGroupResponse.Message == nil {
			break
		}

		return e.complexity.CustomerGroupResponse.Message(childComplexity), true

	case "CustomerList.id":
		if e.complexity.CustomerList.ID == nil {
			break
		}

		return e.complexity.CustomerList.ID(childComplexity), true

	case "CustomerList.name":
		if e.complexity.CustomerList.Name == nil {
			break
		}

		return e.complexity.CustomerList.Name(childComplexity), true

	case "CustomerListResponse.data":
		if e.complexity.CustomerListResponse.Data == nil {
			break
		}

		return e.complexity.CustomerListResponse.Data(childComplexity), true

	case "CustomerListResponse.error":
		if e.complexity.CustomerListResponse.Error == nil {
			break
		}

		return e.complexity.CustomerListResponse.Error(childComplexity), true

	case "CustomerListResponse.message":
		if e.complexity.CustomerListResponse.Message == nil {
			break
		}

		return e.complexity.CustomerListResponse.Message(childComplexity), true

	case "CustomerTaskFeedBackResponse.error":
		if e.complexity.CustomerTaskFeedBackResponse.Error == nil {
			break
		}

		return e.complexity.CustomerTaskFeedBackResponse.Error(childComplexity), true

	case "CustomerTaskFeedBackResponse.message":
		if e.complexity.CustomerTaskFeedBackResponse.Message == nil {
			break
		}

		return e.complexity.CustomerTaskFeedBackResponse.Message(childComplexity), true

	case "CustomerTaskFeedBackResponse.validationErrors":
		if e.complexity.CustomerTaskFeedBackResponse.ValidationErrors == nil {
			break
		}

		return e.complexity.CustomerTaskFeedBackResponse.ValidationErrors(childComplexity), true

	case "GetCustomerContactResponse.getCustomerContact":
		if e.complexity.GetCustomerContactResponse.GetCustomerContact == nil {
			break
		}

		return e.complexity.GetCustomerContactResponse.GetCustomerContact(childComplexity), true

	case "GetKpi.brandDesign":
		if e.complexity.GetKpi.BrandDesign == nil {
			break
		}

		return e.complexity.GetKpi.BrandDesign(childComplexity), true

	case "GetKpi.brandKpiId":
		if e.complexity.GetKpi.BrandKpiID == nil {
			break
		}

		return e.complexity.GetKpi.BrandKpiID(childComplexity), true

	case "GetKpi.brandKpiVersionId":
		if e.complexity.GetKpi.BrandKpiVersionID == nil {
			break
		}

		return e.complexity.GetKpi.BrandKpiVersionID(childComplexity), true

	case "GetKpi.effectiveMonth":
		if e.complexity.GetKpi.EffectiveMonth == nil {
			break
		}

		return e.complexity.GetKpi.EffectiveMonth(childComplexity), true

	case "GetKpi.effectiveYear":
		if e.complexity.GetKpi.EffectiveYear == nil {
			break
		}

		return e.complexity.GetKpi.EffectiveYear(childComplexity), true

	case "GetKpi.isPriority":
		if e.complexity.GetKpi.IsPriority == nil {
			break
		}

		return e.complexity.GetKpi.IsPriority(childComplexity), true

	case "GetKpi.kpiName":
		if e.complexity.GetKpi.KpiName == nil {
			break
		}

		return e.complexity.GetKpi.KpiName(childComplexity), true

	case "GetKpi.parentKpiId":
		if e.complexity.GetKpi.ParentKpiID == nil {
			break
		}

		return e.complexity.GetKpi.ParentKpiID(childComplexity), true

	case "GetKpi.productDesign":
		if e.complexity.GetKpi.ProductDesign == nil {
			break
		}

		return e.complexity.GetKpi.ProductDesign(childComplexity), true

	case "GetKpi.productKpiId":
		if e.complexity.GetKpi.ProductKpiID == nil {
			break
		}

		return e.complexity.GetKpi.ProductKpiID(childComplexity), true

	case "GetKpi.productKpiVersionId":
		if e.complexity.GetKpi.ProductKpiVersionID == nil {
			break
		}

		return e.complexity.GetKpi.ProductKpiVersionID(childComplexity), true

	case "GetKpi.targetBrand":
		if e.complexity.GetKpi.TargetBrand == nil {
			break
		}

		return e.complexity.GetKpi.TargetBrand(childComplexity), true

	case "GetKpi.targetProduct":
		if e.complexity.GetKpi.TargetProduct == nil {
			break
		}

		return e.complexity.GetKpi.TargetProduct(childComplexity), true

	case "GetKpi.targetTeamId":
		if e.complexity.GetKpi.TargetTeamID == nil {
			break
		}

		return e.complexity.GetKpi.TargetTeamID(childComplexity), true

	case "GetKpi.targetTeamName":
		if e.complexity.GetKpi.TargetTeamName == nil {
			break
		}

		return e.complexity.GetKpi.TargetTeamName(childComplexity), true

	case "GetKpiAnswerResponse.error":
		if e.complexity.GetKpiAnswerResponse.Error == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.Error(childComplexity), true

	case "GetKpiAnswerResponse.errorCode":
		if e.complexity.GetKpiAnswerResponse.ErrorCode == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.ErrorCode(childComplexity), true

	case "GetKpiAnswerResponse.getAnswers":
		if e.complexity.GetKpiAnswerResponse.GetAnswers == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.GetAnswers(childComplexity), true

	case "GetKpiAnswerResponse.isOldAnswer":
		if e.complexity.GetKpiAnswerResponse.IsOldAnswer == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.IsOldAnswer(childComplexity), true

	case "GetKpiAnswerResponse.isProposedStock":
		if e.complexity.GetKpiAnswerResponse.IsProposedStock == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.IsProposedStock(childComplexity), true

	case "GetKpiAnswerResponse.message":
		if e.complexity.GetKpiAnswerResponse.Message == nil {
			break
		}

		return e.complexity.GetKpiAnswerResponse.Message(childComplexity), true

	case "GetKpiBrandProductResponse.brands":
		if e.complexity.GetKpiBrandProductResponse.Brands == nil {
			break
		}

		return e.complexity.GetKpiBrandProductResponse.Brands(childComplexity), true

	case "GetKpiBrandProductResponse.error":
		if e.complexity.GetKpiBrandProductResponse.Error == nil {
			break
		}

		return e.complexity.GetKpiBrandProductResponse.Error(childComplexity), true

	case "GetKpiBrandProductResponse.errorCode":
		if e.complexity.GetKpiBrandProductResponse.ErrorCode == nil {
			break
		}

		return e.complexity.GetKpiBrandProductResponse.ErrorCode(childComplexity), true

	case "GetKpiBrandProductResponse.message":
		if e.complexity.GetKpiBrandProductResponse.Message == nil {
			break
		}

		return e.complexity.GetKpiBrandProductResponse.Message(childComplexity), true

	case "GetKpiOffline.brandDesign":
		if e.complexity.GetKpiOffline.BrandDesign == nil {
			break
		}

		return e.complexity.GetKpiOffline.BrandDesign(childComplexity), true

	case "GetKpiOffline.brandKpiId":
		if e.complexity.GetKpiOffline.BrandKpiID == nil {
			break
		}

		return e.complexity.GetKpiOffline.BrandKpiID(childComplexity), true

	case "GetKpiOffline.brandKpiVersionId":
		if e.complexity.GetKpiOffline.BrandKpiVersionID == nil {
			break
		}

		return e.complexity.GetKpiOffline.BrandKpiVersionID(childComplexity), true

	case "GetKpiOffline.effectiveMonth":
		if e.complexity.GetKpiOffline.EffectiveMonth == nil {
			break
		}

		return e.complexity.GetKpiOffline.EffectiveMonth(childComplexity), true

	case "GetKpiOffline.effectiveYear":
		if e.complexity.GetKpiOffline.EffectiveYear == nil {
			break
		}

		return e.complexity.GetKpiOffline.EffectiveYear(childComplexity), true

	case "GetKpiOffline.isPriority":
		if e.complexity.GetKpiOffline.IsPriority == nil {
			break
		}

		return e.complexity.GetKpiOffline.IsPriority(childComplexity), true

	case "GetKpiOffline.kpiName":
		if e.complexity.GetKpiOffline.KpiName == nil {
			break
		}

		return e.complexity.GetKpiOffline.KpiName(childComplexity), true

	case "GetKpiOffline.parentKpiId":
		if e.complexity.GetKpiOffline.ParentKpiID == nil {
			break
		}

		return e.complexity.GetKpiOffline.ParentKpiID(childComplexity), true

	case "GetKpiOffline.productDesign":
		if e.complexity.GetKpiOffline.ProductDesign == nil {
			break
		}

		return e.complexity.GetKpiOffline.ProductDesign(childComplexity), true

	case "GetKpiOffline.productKpiId":
		if e.complexity.GetKpiOffline.ProductKpiID == nil {
			break
		}

		return e.complexity.GetKpiOffline.ProductKpiID(childComplexity), true

	case "GetKpiOffline.productKpiVersionId":
		if e.complexity.GetKpiOffline.ProductKpiVersionID == nil {
			break
		}

		return e.complexity.GetKpiOffline.ProductKpiVersionID(childComplexity), true

	case "GetKpiOffline.targetBrand":
		if e.complexity.GetKpiOffline.TargetBrand == nil {
			break
		}

		return e.complexity.GetKpiOffline.TargetBrand(childComplexity), true

	case "GetKpiOffline.targetProduct":
		if e.complexity.GetKpiOffline.TargetProduct == nil {
			break
		}

		return e.complexity.GetKpiOffline.TargetProduct(childComplexity), true

	case "GetKpiOffline.targetTeamId":
		if e.complexity.GetKpiOffline.TargetTeamID == nil {
			break
		}

		return e.complexity.GetKpiOffline.TargetTeamID(childComplexity), true

	case "GetKpiOffline.targetTeamName":
		if e.complexity.GetKpiOffline.TargetTeamName == nil {
			break
		}

		return e.complexity.GetKpiOffline.TargetTeamName(childComplexity), true

	case "GetKpiResponse.data":
		if e.complexity.GetKpiResponse.Data == nil {
			break
		}

		return e.complexity.GetKpiResponse.Data(childComplexity), true

	case "GetKpiResponse.error":
		if e.complexity.GetKpiResponse.Error == nil {
			break
		}

		return e.complexity.GetKpiResponse.Error(childComplexity), true

	case "GetKpiResponse.errorCode":
		if e.complexity.GetKpiResponse.ErrorCode == nil {
			break
		}

		return e.complexity.GetKpiResponse.ErrorCode(childComplexity), true

	case "GetKpiResponse.message":
		if e.complexity.GetKpiResponse.Message == nil {
			break
		}

		return e.complexity.GetKpiResponse.Message(childComplexity), true

	case "GetKpiResponse.totalPage":
		if e.complexity.GetKpiResponse.TotalPage == nil {
			break
		}

		return e.complexity.GetKpiResponse.TotalPage(childComplexity), true

	case "GetKpiTargetResponse.error":
		if e.complexity.GetKpiTargetResponse.Error == nil {
			break
		}

		return e.complexity.GetKpiTargetResponse.Error(childComplexity), true

	case "GetKpiTargetResponse.getTargets":
		if e.complexity.GetKpiTargetResponse.GetTargets == nil {
			break
		}

		return e.complexity.GetKpiTargetResponse.GetTargets(childComplexity), true

	case "GetKpiTargetResponse.message":
		if e.complexity.GetKpiTargetResponse.Message == nil {
			break
		}

		return e.complexity.GetKpiTargetResponse.Message(childComplexity), true

	case "GetTargetCustomerResponse.data":
		if e.complexity.GetTargetCustomerResponse.Data == nil {
			break
		}

		return e.complexity.GetTargetCustomerResponse.Data(childComplexity), true

	case "GetTargetCustomerResponse.error":
		if e.complexity.GetTargetCustomerResponse.Error == nil {
			break
		}

		return e.complexity.GetTargetCustomerResponse.Error(childComplexity), true

	case "GetTargetCustomerResponse.message":
		if e.complexity.GetTargetCustomerResponse.Message == nil {
			break
		}

		return e.complexity.GetTargetCustomerResponse.Message(childComplexity), true

	case "GetTargetCustomerResponse.totalPage":
		if e.complexity.GetTargetCustomerResponse.TotalPage == nil {
			break
		}

		return e.complexity.GetTargetCustomerResponse.TotalPage(childComplexity), true

	case "GetTargetCustomerResponse.url":
		if e.complexity.GetTargetCustomerResponse.URL == nil {
			break
		}

		return e.complexity.GetTargetCustomerResponse.URL(childComplexity), true

	case "Images.name":
		if e.complexity.Images.Name == nil {
			break
		}

		return e.complexity.Images.Name(childComplexity), true

	case "Images.url":
		if e.complexity.Images.URL == nil {
			break
		}

		return e.complexity.Images.URL(childComplexity), true

	case "KPIAnswerRes.questioNnumber":
		if e.complexity.KPIAnswerRes.QuestioNnumber == nil {
			break
		}

		return e.complexity.KPIAnswerRes.QuestioNnumber(childComplexity), true

	case "KPIAnswerRes.value":
		if e.complexity.KPIAnswerRes.Value == nil {
			break
		}

		return e.complexity.KPIAnswerRes.Value(childComplexity), true

	case "KPIDesignRes.active":
		if e.complexity.KPIDesignRes.Active == nil {
			break
		}

		return e.complexity.KPIDesignRes.Active(childComplexity), true

	case "KPIDesignRes.category":
		if e.complexity.KPIDesignRes.Category == nil {
			break
		}

		return e.complexity.KPIDesignRes.Category(childComplexity), true

	case "KPIDesignRes.categoryId":
		if e.complexity.KPIDesignRes.CategoryID == nil {
			break
		}

		return e.complexity.KPIDesignRes.CategoryID(childComplexity), true

	case "KPIDesignRes.effectiveEndDate":
		if e.complexity.KPIDesignRes.EffectiveEndDate == nil {
			break
		}

		return e.complexity.KPIDesignRes.EffectiveEndDate(childComplexity), true

	case "KPIDesignRes.effectiveStartDate":
		if e.complexity.KPIDesignRes.EffectiveStartDate == nil {
			break
		}

		return e.complexity.KPIDesignRes.EffectiveStartDate(childComplexity), true

	case "KPIDesignRes.name":
		if e.complexity.KPIDesignRes.Name == nil {
			break
		}

		return e.complexity.KPIDesignRes.Name(childComplexity), true

	case "KPIDesignRes.questions":
		if e.complexity.KPIDesignRes.Questions == nil {
			break
		}

		return e.complexity.KPIDesignRes.Questions(childComplexity), true

	case "KPIDesignRes.type":
		if e.complexity.KPIDesignRes.Type == nil {
			break
		}

		return e.complexity.KPIDesignRes.Type(childComplexity), true

	case "KPIQuestionRes.active":
		if e.complexity.KPIQuestionRes.Active == nil {
			break
		}

		return e.complexity.KPIQuestionRes.Active(childComplexity), true

	case "KPIQuestionRes.optionValues":
		if e.complexity.KPIQuestionRes.OptionValues == nil {
			break
		}

		return e.complexity.KPIQuestionRes.OptionValues(childComplexity), true

	case "KPIQuestionRes.questionNumber":
		if e.complexity.KPIQuestionRes.QuestionNumber == nil {
			break
		}

		return e.complexity.KPIQuestionRes.QuestionNumber(childComplexity), true

	case "KPIQuestionRes.required":
		if e.complexity.KPIQuestionRes.Required == nil {
			break
		}

		return e.complexity.KPIQuestionRes.Required(childComplexity), true

	case "KPIQuestionRes.title":
		if e.complexity.KPIQuestionRes.Title == nil {
			break
		}

		return e.complexity.KPIQuestionRes.Title(childComplexity), true

	case "KPIQuestionRes.type":
		if e.complexity.KPIQuestionRes.Type == nil {
			break
		}

		return e.complexity.KPIQuestionRes.Type(childComplexity), true

	case "KpiAnswer.answer":
		if e.complexity.KpiAnswer.Answer == nil {
			break
		}

		return e.complexity.KpiAnswer.Answer(childComplexity), true

	case "KpiAnswer.category":
		if e.complexity.KpiAnswer.Category == nil {
			break
		}

		return e.complexity.KpiAnswer.Category(childComplexity), true

	case "KpiAnswer.id":
		if e.complexity.KpiAnswer.ID == nil {
			break
		}

		return e.complexity.KpiAnswer.ID(childComplexity), true

	case "KpiAnswer.kpiId":
		if e.complexity.KpiAnswer.KpiID == nil {
			break
		}

		return e.complexity.KpiAnswer.KpiID(childComplexity), true

	case "KpiAnswer.kpiVersionId":
		if e.complexity.KpiAnswer.KpiVersionID == nil {
			break
		}

		return e.complexity.KpiAnswer.KpiVersionID(childComplexity), true

	case "KpiAnswer.scheduleEvent":
		if e.complexity.KpiAnswer.ScheduleEvent == nil {
			break
		}

		return e.complexity.KpiAnswer.ScheduleEvent(childComplexity), true

	case "KpiAnswer.targetItem":
		if e.complexity.KpiAnswer.TargetItem == nil {
			break
		}

		return e.complexity.KpiAnswer.TargetItem(childComplexity), true

	case "KpiAnswer.teamMemberCustomerId":
		if e.complexity.KpiAnswer.TeamMemberCustomerID == nil {
			break
		}

		return e.complexity.KpiAnswer.TeamMemberCustomerID(childComplexity), true

	case "KpiBrandItem.brandId":
		if e.complexity.KpiBrandItem.BrandID == nil {
			break
		}

		return e.complexity.KpiBrandItem.BrandID(childComplexity), true

	case "KpiBrandItem.brandName":
		if e.complexity.KpiBrandItem.BrandName == nil {
			break
		}

		return e.complexity.KpiBrandItem.BrandName(childComplexity), true

	case "KpiBrandItem.products":
		if e.complexity.KpiBrandItem.Products == nil {
			break
		}

		return e.complexity.KpiBrandItem.Products(childComplexity), true

	case "KpiBrandItemOffline.brandId":
		if e.complexity.KpiBrandItemOffline.BrandID == nil {
			break
		}

		return e.complexity.KpiBrandItemOffline.BrandID(childComplexity), true

	case "KpiBrandItemOffline.brandKpiAnswer":
		if e.complexity.KpiBrandItemOffline.BrandKpiAnswer == nil {
			break
		}

		return e.complexity.KpiBrandItemOffline.BrandKpiAnswer(childComplexity), true

	case "KpiBrandItemOffline.brandKpiVersionId":
		if e.complexity.KpiBrandItemOffline.BrandKpiVersionID == nil {
			break
		}

		return e.complexity.KpiBrandItemOffline.BrandKpiVersionID(childComplexity), true

	case "KpiBrandItemOffline.brandName":
		if e.complexity.KpiBrandItemOffline.BrandName == nil {
			break
		}

		return e.complexity.KpiBrandItemOffline.BrandName(childComplexity), true

	case "KpiBrandItemOffline.products":
		if e.complexity.KpiBrandItemOffline.Products == nil {
			break
		}

		return e.complexity.KpiBrandItemOffline.Products(childComplexity), true

	case "KpiOfflineResponse.error":
		if e.complexity.KpiOfflineResponse.Error == nil {
			break
		}

		return e.complexity.KpiOfflineResponse.Error(childComplexity), true

	case "KpiOfflineResponse.errorCode":
		if e.complexity.KpiOfflineResponse.ErrorCode == nil {
			break
		}

		return e.complexity.KpiOfflineResponse.ErrorCode(childComplexity), true

	case "KpiOfflineResponse.getKpiOffline":
		if e.complexity.KpiOfflineResponse.GetKpiOffline == nil {
			break
		}

		return e.complexity.KpiOfflineResponse.GetKpiOffline(childComplexity), true

	case "KpiOfflineResponse.kpiProductBrandAnswer":
		if e.complexity.KpiOfflineResponse.KpiProductBrandAnswer == nil {
			break
		}

		return e.complexity.KpiOfflineResponse.KpiProductBrandAnswer(childComplexity), true

	case "KpiOfflineResponse.message":
		if e.complexity.KpiOfflineResponse.Message == nil {
			break
		}

		return e.complexity.KpiOfflineResponse.Message(childComplexity), true

	case "KpiProductBrandAnswer.brands":
		if e.complexity.KpiProductBrandAnswer.Brands == nil {
			break
		}

		return e.complexity.KpiProductBrandAnswer.Brands(childComplexity), true

	case "KpiProductBrandAnswer.eventID":
		if e.complexity.KpiProductBrandAnswer.EventID == nil {
			break
		}

		return e.complexity.KpiProductBrandAnswer.EventID(childComplexity), true

	case "KpiProductBrandAnswer.teamCustomerID":
		if e.complexity.KpiProductBrandAnswer.TeamCustomerID == nil {
			break
		}

		return e.complexity.KpiProductBrandAnswer.TeamCustomerID(childComplexity), true

	case "KpiProductItem.isPriority":
		if e.complexity.KpiProductItem.IsPriority == nil {
			break
		}

		return e.complexity.KpiProductItem.IsPriority(childComplexity), true

	case "KpiProductItem.materialDescription":
		if e.complexity.KpiProductItem.MaterialDescription == nil {
			break
		}

		return e.complexity.KpiProductItem.MaterialDescription(childComplexity), true

	case "KpiProductItem.principalName":
		if e.complexity.KpiProductItem.PrincipalName == nil {
			break
		}

		return e.complexity.KpiProductItem.PrincipalName(childComplexity), true

	case "KpiProductItem.productId":
		if e.complexity.KpiProductItem.ProductID == nil {
			break
		}

		return e.complexity.KpiProductItem.ProductID(childComplexity), true

	case "KpiProductItem.teamProductId":
		if e.complexity.KpiProductItem.TeamProductID == nil {
			break
		}

		return e.complexity.KpiProductItem.TeamProductID(childComplexity), true

	case "KpiProductItemOffline.isPriority":
		if e.complexity.KpiProductItemOffline.IsPriority == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.IsPriority(childComplexity), true

	case "KpiProductItemOffline.materialDescription":
		if e.complexity.KpiProductItemOffline.MaterialDescription == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.MaterialDescription(childComplexity), true

	case "KpiProductItemOffline.principalName":
		if e.complexity.KpiProductItemOffline.PrincipalName == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.PrincipalName(childComplexity), true

	case "KpiProductItemOffline.productId":
		if e.complexity.KpiProductItemOffline.ProductID == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.ProductID(childComplexity), true

	case "KpiProductItemOffline.productKpiAnswer":
		if e.complexity.KpiProductItemOffline.ProductKpiAnswer == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.ProductKpiAnswer(childComplexity), true

	case "KpiProductItemOffline.productKpiVersionId":
		if e.complexity.KpiProductItemOffline.ProductKpiVersionID == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.ProductKpiVersionID(childComplexity), true

	case "KpiProductItemOffline.teamId":
		if e.complexity.KpiProductItemOffline.TeamID == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.TeamID(childComplexity), true

	case "KpiProductItemOffline.teamProductId":
		if e.complexity.KpiProductItemOffline.TeamProductID == nil {
			break
		}

		return e.complexity.KpiProductItemOffline.TeamProductID(childComplexity), true

	case "KpiTaregetTitleResponse.error":
		if e.complexity.KpiTaregetTitleResponse.Error == nil {
			break
		}

		return e.complexity.KpiTaregetTitleResponse.Error(childComplexity), true

	case "KpiTaregetTitleResponse.kpiTargetTitles":
		if e.complexity.KpiTaregetTitleResponse.KpiTargetTitles == nil {
			break
		}

		return e.complexity.KpiTaregetTitleResponse.KpiTargetTitles(childComplexity), true

	case "KpiTaregetTitleResponse.message":
		if e.complexity.KpiTaregetTitleResponse.Message == nil {
			break
		}

		return e.complexity.KpiTaregetTitleResponse.Message(childComplexity), true

	case "KpiTarget.bergu":
		if e.complexity.KpiTarget.Bergu == nil {
			break
		}

		return e.complexity.KpiTarget.Bergu(childComplexity), true

	case "KpiTarget.country":
		if e.complexity.KpiTarget.Country == nil {
			break
		}

		return e.complexity.KpiTarget.Country(childComplexity), true

	case "KpiTarget.currency":
		if e.complexity.KpiTarget.Currency == nil {
			break
		}

		return e.complexity.KpiTarget.Currency(childComplexity), true

	case "KpiTarget.id":
		if e.complexity.KpiTarget.ID == nil {
			break
		}

		return e.complexity.KpiTarget.ID(childComplexity), true

	case "KpiTarget.plants":
		if e.complexity.KpiTarget.Plants == nil {
			break
		}

		return e.complexity.KpiTarget.Plants(childComplexity), true

	case "KpiTarget.region":
		if e.complexity.KpiTarget.Region == nil {
			break
		}

		return e.complexity.KpiTarget.Region(childComplexity), true

	case "KpiTarget.salesRep":
		if e.complexity.KpiTarget.SalesRep == nil {
			break
		}

		return e.complexity.KpiTarget.SalesRep(childComplexity), true

	case "KpiTarget.status":
		if e.complexity.KpiTarget.Status == nil {
			break
		}

		return e.complexity.KpiTarget.Status(childComplexity), true

	case "KpiTarget.target":
		if e.complexity.KpiTarget.Target == nil {
			break
		}

		return e.complexity.KpiTarget.Target(childComplexity), true

	case "KpiTarget.teamName":
		if e.complexity.KpiTarget.TeamName == nil {
			break
		}

		return e.complexity.KpiTarget.TeamName(childComplexity), true

	case "KpiTarget.year":
		if e.complexity.KpiTarget.Year == nil {
			break
		}

		return e.complexity.KpiTarget.Year(childComplexity), true

	case "KpiTargetRes.kpiTitle":
		if e.complexity.KpiTargetRes.KpiTitle == nil {
			break
		}

		return e.complexity.KpiTargetRes.KpiTitle(childComplexity), true

	case "KpiTargetRes.kpiValue":
		if e.complexity.KpiTargetRes.KpiValue == nil {
			break
		}

		return e.complexity.KpiTargetRes.KpiValue(childComplexity), true

	case "KpiTargetRes.values":
		if e.complexity.KpiTargetRes.Values == nil {
			break
		}

		return e.complexity.KpiTargetRes.Values(childComplexity), true

	case "KpiTargetTitle.description":
		if e.complexity.KpiTargetTitle.Description == nil {
			break
		}

		return e.complexity.KpiTargetTitle.Description(childComplexity), true

	case "KpiTargetTitle.title":
		if e.complexity.KpiTargetTitle.Title == nil {
			break
		}

		return e.complexity.KpiTargetTitle.Title(childComplexity), true

	case "KpiTargetTitle.value":
		if e.complexity.KpiTargetTitle.Value == nil {
			break
		}

		return e.complexity.KpiTargetTitle.Value(childComplexity), true

	case "Mutation.actionKpiTarget":
		if e.complexity.Mutation.ActionKpiTarget == nil {
			break
		}

		args, err := ec.field_Mutation_actionKpiTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActionKpiTarget(childComplexity, args["input"].(model.ActionKPITargetInput)), true

	case "Mutation.deleteCustomerContact":
		if e.complexity.Mutation.DeleteCustomerContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomerContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomerContact(childComplexity, args["input"].(model.CustomerContactDeleteRequest)), true

	case "Mutation.insertCustomerTaskFeedBack":
		if e.complexity.Mutation.InsertCustomerTaskFeedBack == nil {
			break
		}

		args, err := ec.field_Mutation_insertCustomerTaskFeedBack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertCustomerTaskFeedBack(childComplexity, args["input"].(model.CustomerTaskFeedBackInput)), true

	case "Mutation.saveCustomerTarget":
		if e.complexity.Mutation.SaveCustomerTarget == nil {
			break
		}

		args, err := ec.field_Mutation_saveCustomerTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveCustomerTarget(childComplexity, args["input"].(model.CustomerTargetInput)), true

	case "Mutation.saveKpi":
		if e.complexity.Mutation.SaveKpi == nil {
			break
		}

		args, err := ec.field_Mutation_saveKpi_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveKpi(childComplexity, args["input"].(model.UpsertKpiRequest)), true

	case "Mutation.saveKpiAnswers":
		if e.complexity.Mutation.SaveKpiAnswers == nil {
			break
		}

		args, err := ec.field_Mutation_saveKpiAnswers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveKpiAnswers(childComplexity, args["input"].(model.KpiAnswerRequest)), true

	case "Mutation.upsertCustomerContact":
		if e.complexity.Mutation.UpsertCustomerContact == nil {
			break
		}

		args, err := ec.field_Mutation_upsertCustomerContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertCustomerContact(childComplexity, args["input"].(model.CustomerContactRequest)), true

	case "Mutation.upsertFlashBulletin":
		if e.complexity.Mutation.UpsertFlashBulletin == nil {
			break
		}

		args, err := ec.field_Mutation_upsertFlashBulletin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertFlashBulletin(childComplexity, args["input"].(model.FlashBulletinUpsertInput)), true

	case "Mutation.upsertKpiTarget":
		if e.complexity.Mutation.UpsertKpiTarget == nil {
			break
		}

		args, err := ec.field_Mutation_upsertKpiTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertKpiTarget(childComplexity, args["input"].(model.KPITargetInput)), true

	case "Mutation.upsertTaskBulletin":
		if e.complexity.Mutation.UpsertTaskBulletin == nil {
			break
		}

		args, err := ec.field_Mutation_upsertTaskBulletin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertTaskBulletin(childComplexity, args["input"].(model.TaskBulletinUpsertInput)), true

	case "PrincipalDropDownResponse.data":
		if e.complexity.PrincipalDropDownResponse.Data == nil {
			break
		}

		return e.complexity.PrincipalDropDownResponse.Data(childComplexity), true

	case "PrincipalDropDownResponse.error":
		if e.complexity.PrincipalDropDownResponse.Error == nil {
			break
		}

		return e.complexity.PrincipalDropDownResponse.Error(childComplexity), true

	case "PrincipalDropDownResponse.message":
		if e.complexity.PrincipalDropDownResponse.Message == nil {
			break
		}

		return e.complexity.PrincipalDropDownResponse.Message(childComplexity), true

	case "ProductList.id":
		if e.complexity.ProductList.ID == nil {
			break
		}

		return e.complexity.ProductList.ID(childComplexity), true

	case "ProductList.name":
		if e.complexity.ProductList.Name == nil {
			break
		}

		return e.complexity.ProductList.Name(childComplexity), true

	case "ProductListResponse.data":
		if e.complexity.ProductListResponse.Data == nil {
			break
		}

		return e.complexity.ProductListResponse.Data(childComplexity), true

	case "ProductListResponse.error":
		if e.complexity.ProductListResponse.Error == nil {
			break
		}

		return e.complexity.ProductListResponse.Error(childComplexity), true

	case "ProductListResponse.message":
		if e.complexity.ProductListResponse.Message == nil {
			break
		}

		return e.complexity.ProductListResponse.Message(childComplexity), true

	case "Query.fetchCustomerFeedback":
		if e.complexity.Query.FetchCustomerFeedback == nil {
			break
		}

		args, err := ec.field_Query_fetchCustomerFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchCustomerFeedback(childComplexity, args["input"].(model.FetchCustomerFeedbackInput)), true

	case "Query.getCustomerGroup":
		if e.complexity.Query.GetCustomerGroup == nil {
			break
		}

		args, err := ec.field_Query_getCustomerGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCustomerGroup(childComplexity, args["input"].(*model.CustomerGroupInput)), true

	case "Query.getGetCustomerContacts":
		if e.complexity.Query.GetGetCustomerContacts == nil {
			break
		}

		args, err := ec.field_Query_getGetCustomerContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGetCustomerContacts(childComplexity, args["input"].(*model.GetCustomerContactRequest)), true

	case "Query.getKpiAnswers":
		if e.complexity.Query.GetKpiAnswers == nil {
			break
		}

		args, err := ec.field_Query_getKpiAnswers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKpiAnswers(childComplexity, args["input"].(*model.GetKpiAnswerRequest)), true

	case "Query.getKpiBrandProduct":
		if e.complexity.Query.GetKpiBrandProduct == nil {
			break
		}

		args, err := ec.field_Query_getKpiBrandProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKpiBrandProduct(childComplexity, args["input"].(model.GetBrandProductRequest)), true

	case "Query.getKpiQuestionAnswerOffline":
		if e.complexity.Query.GetKpiQuestionAnswerOffline == nil {
			break
		}

		args, err := ec.field_Query_getKpiQuestionAnswerOffline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKpiQuestionAnswerOffline(childComplexity, args["input"].(model.KpiOfflineInput)), true

	case "Query.getKpiTargetTitle":
		if e.complexity.Query.GetKpiTargetTitle == nil {
			break
		}

		return e.complexity.Query.GetKpiTargetTitle(childComplexity), true

	case "Query.getKpiTargets":
		if e.complexity.Query.GetKpiTargets == nil {
			break
		}

		args, err := ec.field_Query_getKpiTargets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKpiTargets(childComplexity, args["input"].(*model.GetKpiTargetRequest)), true

	case "Query.getKpis":
		if e.complexity.Query.GetKpis == nil {
			break
		}

		args, err := ec.field_Query_getKpis_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKpis(childComplexity, args["input"].(*model.GetKpiInput)), true

	case "Query.getTargetCustomer":
		if e.complexity.Query.GetTargetCustomer == nil {
			break
		}

		args, err := ec.field_Query_getTargetCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTargetCustomer(childComplexity, args["input"].(model.GetTargetCustomerRequest)), true

	case "Query.listFlashbulletin":
		if e.complexity.Query.ListFlashbulletin == nil {
			break
		}

		args, err := ec.field_Query_listFlashbulletin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListFlashbulletin(childComplexity, args["input"].(model.ListFlashBulletinInput)), true

	case "Query.listTaskBulletin":
		if e.complexity.Query.ListTaskBulletin == nil {
			break
		}

		args, err := ec.field_Query_listTaskBulletin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListTaskBulletin(childComplexity, args["input"].(*model.ListTaskBulletinInput)), true

	case "Query.principalDropDown":
		if e.complexity.Query.PrincipalDropDown == nil {
			break
		}

		args, err := ec.field_Query_principalDropDown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrincipalDropDown(childComplexity, args["input"].(model.PrincipalDropDownInput)), true

	case "Query.retrievePictureBrandList":
		if e.complexity.Query.RetrievePictureBrandList == nil {
			break
		}

		args, err := ec.field_Query_retrievePictureBrandList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePictureBrandList(childComplexity, args["input"].(*model.ListInput)), true

	case "Query.retrievePictureCustomerList":
		if e.complexity.Query.RetrievePictureCustomerList == nil {
			break
		}

		args, err := ec.field_Query_retrievePictureCustomerList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePictureCustomerList(childComplexity, args["input"].(*model.ListInput)), true

	case "Query.retrievePictureProductList":
		if e.complexity.Query.RetrievePictureProductList == nil {
			break
		}

		args, err := ec.field_Query_retrievePictureProductList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePictureProductList(childComplexity, args["input"].(*model.ListInput)), true

	case "Query.retrievePictureZip":
		if e.complexity.Query.RetrievePictureZip == nil {
			break
		}

		args, err := ec.field_Query_retrievePictureZip_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePictureZip(childComplexity, args["input"].(model.PictureZipInput)), true

	case "Query.retrievePictures":
		if e.complexity.Query.RetrievePictures == nil {
			break
		}

		args, err := ec.field_Query_retrievePictures_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrievePictures(childComplexity, args["input"].(model.PicturesInput)), true

	case "Query.retriveFlashBulletinSingle":
		if e.complexity.Query.RetriveFlashBulletinSingle == nil {
			break
		}

		args, err := ec.field_Query_retriveFlashBulletinSingle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetriveFlashBulletinSingle(childComplexity, args["input"].(model.RetriveInfoFlashBulletinInput)), true

	case "Query.TaskBuletinReport":
		if e.complexity.Query.TaskBuletinReport == nil {
			break
		}

		args, err := ec.field_Query_TaskBuletinReport_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskBuletinReport(childComplexity, args["input"].(model.TaskBulletinReportInput)), true

	case "Query.taskBulletinTitleDropDown":
		if e.complexity.Query.TaskBulletinTitleDropDown == nil {
			break
		}

		args, err := ec.field_Query_taskBulletinTitleDropDown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskBulletinTitleDropDown(childComplexity, args["input"].(*model.TaskBulletinTitleInput)), true

	case "Query.teamToCustomerDropDown":
		if e.complexity.Query.TeamToCustomerDropDown == nil {
			break
		}

		args, err := ec.field_Query_teamToCustomerDropDown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TeamToCustomerDropDown(childComplexity, args["input"].(*model.TaskBulletinInput)), true

	case "Query.todos":
		if e.complexity.Query.Todos == nil {
			break
		}

		return e.complexity.Query.Todos(childComplexity), true

	case "Recipients.description":
		if e.complexity.Recipients.Description == nil {
			break
		}

		return e.complexity.Recipients.Description(childComplexity), true

	case "Recipients.id":
		if e.complexity.Recipients.ID == nil {
			break
		}

		return e.complexity.Recipients.ID(childComplexity), true

	case "RetrievePictureZip.error":
		if e.complexity.RetrievePictureZip.Error == nil {
			break
		}

		return e.complexity.RetrievePictureZip.Error(childComplexity), true

	case "RetrievePictureZip.message":
		if e.complexity.RetrievePictureZip.Message == nil {
			break
		}

		return e.complexity.RetrievePictureZip.Message(childComplexity), true

	case "RetrievePictureZip.url":
		if e.complexity.RetrievePictureZip.URL == nil {
			break
		}

		return e.complexity.RetrievePictureZip.URL(childComplexity), true

	case "RetrievePicturesResponse.data":
		if e.complexity.RetrievePicturesResponse.Data == nil {
			break
		}

		return e.complexity.RetrievePicturesResponse.Data(childComplexity), true

	case "RetrievePicturesResponse.error":
		if e.complexity.RetrievePicturesResponse.Error == nil {
			break
		}

		return e.complexity.RetrievePicturesResponse.Error(childComplexity), true

	case "RetrievePicturesResponse.message":
		if e.complexity.RetrievePicturesResponse.Message == nil {
			break
		}

		return e.complexity.RetrievePicturesResponse.Message(childComplexity), true

	case "SalesRepData.activeDirectory":
		if e.complexity.SalesRepData.ActiveDirectory == nil {
			break
		}

		return e.complexity.SalesRepData.ActiveDirectory(childComplexity), true

	case "SalesRepData.approvalRoleTitle":
		if e.complexity.SalesRepData.ApprovalRoleTitle == nil {
			break
		}

		return e.complexity.SalesRepData.ApprovalRoleTitle(childComplexity), true

	case "SalesRepData.approvalRoleValues":
		if e.complexity.SalesRepData.ApprovalRoleValues == nil {
			break
		}

		return e.complexity.SalesRepData.ApprovalRoleValues(childComplexity), true

	case "SalesRepData.customers":
		if e.complexity.SalesRepData.Customers == nil {
			break
		}

		return e.complexity.SalesRepData.Customers(childComplexity), true

	case "SalesRepData.email":
		if e.complexity.SalesRepData.Email == nil {
			break
		}

		return e.complexity.SalesRepData.Email(childComplexity), true

	case "SalesRepData.firstName":
		if e.complexity.SalesRepData.FirstName == nil {
			break
		}

		return e.complexity.SalesRepData.FirstName(childComplexity), true

	case "SalesRepData.lastName":
		if e.complexity.SalesRepData.LastName == nil {
			break
		}

		return e.complexity.SalesRepData.LastName(childComplexity), true

	case "SalesRepData.teamMemberId":
		if e.complexity.SalesRepData.TeamMemberID == nil {
			break
		}

		return e.complexity.SalesRepData.TeamMemberID(childComplexity), true

	case "SalesRepData.userId":
		if e.complexity.SalesRepData.UserID == nil {
			break
		}

		return e.complexity.SalesRepData.UserID(childComplexity), true

	case "SalesRepDataDropDown.activeDirectory":
		if e.complexity.SalesRepDataDropDown.ActiveDirectory == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.ActiveDirectory(childComplexity), true

	case "SalesRepDataDropDown.approvalRoleTitle":
		if e.complexity.SalesRepDataDropDown.ApprovalRoleTitle == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.ApprovalRoleTitle(childComplexity), true

	case "SalesRepDataDropDown.approvalRoleValues":
		if e.complexity.SalesRepDataDropDown.ApprovalRoleValues == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.ApprovalRoleValues(childComplexity), true

	case "SalesRepDataDropDown.customers":
		if e.complexity.SalesRepDataDropDown.Customers == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.Customers(childComplexity), true

	case "SalesRepDataDropDown.email":
		if e.complexity.SalesRepDataDropDown.Email == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.Email(childComplexity), true

	case "SalesRepDataDropDown.firstName":
		if e.complexity.SalesRepDataDropDown.FirstName == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.FirstName(childComplexity), true

	case "SalesRepDataDropDown.lastName":
		if e.complexity.SalesRepDataDropDown.LastName == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.LastName(childComplexity), true

	case "SalesRepDataDropDown.teamMemberId":
		if e.complexity.SalesRepDataDropDown.TeamMemberID == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.TeamMemberID(childComplexity), true

	case "SalesRepDataDropDown.userId":
		if e.complexity.SalesRepDataDropDown.UserID == nil {
			break
		}

		return e.complexity.SalesRepDataDropDown.UserID(childComplexity), true

	case "Target.month":
		if e.complexity.Target.Month == nil {
			break
		}

		return e.complexity.Target.Month(childComplexity), true

	case "Target.value":
		if e.complexity.Target.Value == nil {
			break
		}

		return e.complexity.Target.Value(childComplexity), true

	case "TargetCustomer.category":
		if e.complexity.TargetCustomer.Category == nil {
			break
		}

		return e.complexity.TargetCustomer.Category(childComplexity), true

	case "TargetCustomer.customerTargetId":
		if e.complexity.TargetCustomer.CustomerTargetID == nil {
			break
		}

		return e.complexity.TargetCustomer.CustomerTargetID(childComplexity), true

	case "TargetCustomer.productBrandId":
		if e.complexity.TargetCustomer.ProductBrandID == nil {
			break
		}

		return e.complexity.TargetCustomer.ProductBrandID(childComplexity), true

	case "TargetCustomer.productBrandName":
		if e.complexity.TargetCustomer.ProductBrandName == nil {
			break
		}

		return e.complexity.TargetCustomer.ProductBrandName(childComplexity), true

	case "TargetCustomer.targets":
		if e.complexity.TargetCustomer.Targets == nil {
			break
		}

		return e.complexity.TargetCustomer.Targets(childComplexity), true

	case "TargetCustomer.type":
		if e.complexity.TargetCustomer.Type == nil {
			break
		}

		return e.complexity.TargetCustomer.Type(childComplexity), true

	case "TargetCustomer.year":
		if e.complexity.TargetCustomer.Year == nil {
			break
		}

		return e.complexity.TargetCustomer.Year(childComplexity), true

	case "TargetValueRes.month":
		if e.complexity.TargetValueRes.Month == nil {
			break
		}

		return e.complexity.TargetValueRes.Month(childComplexity), true

	case "TargetValueRes.value":
		if e.complexity.TargetValueRes.Value == nil {
			break
		}

		return e.complexity.TargetValueRes.Value(childComplexity), true

	case "TaskBulletinResponse.dropDown":
		if e.complexity.TaskBulletinResponse.DropDown == nil {
			break
		}

		return e.complexity.TaskBulletinResponse.DropDown(childComplexity), true

	case "TaskBulletinResponse.error":
		if e.complexity.TaskBulletinResponse.Error == nil {
			break
		}

		return e.complexity.TaskBulletinResponse.Error(childComplexity), true

	case "TaskBulletinResponse.message":
		if e.complexity.TaskBulletinResponse.Message == nil {
			break
		}

		return e.complexity.TaskBulletinResponse.Message(childComplexity), true

	case "TaskBulletinTitleResponse.error":
		if e.complexity.TaskBulletinTitleResponse.Error == nil {
			break
		}

		return e.complexity.TaskBulletinTitleResponse.Error(childComplexity), true

	case "TaskBulletinTitleResponse.message":
		if e.complexity.TaskBulletinTitleResponse.Message == nil {
			break
		}

		return e.complexity.TaskBulletinTitleResponse.Message(childComplexity), true

	case "TaskBulletinTitleResponse.typeDetails":
		if e.complexity.TaskBulletinTitleResponse.TypeDetails == nil {
			break
		}

		return e.complexity.TaskBulletinTitleResponse.TypeDetails(childComplexity), true

	case "TaskBulletinUpsertResponse.error":
		if e.complexity.TaskBulletinUpsertResponse.Error == nil {
			break
		}

		return e.complexity.TaskBulletinUpsertResponse.Error(childComplexity), true

	case "TaskBulletinUpsertResponse.message":
		if e.complexity.TaskBulletinUpsertResponse.Message == nil {
			break
		}

		return e.complexity.TaskBulletinUpsertResponse.Message(childComplexity), true

	case "TaskBulletinUpsertResponse.validationErrors":
		if e.complexity.TaskBulletinUpsertResponse.ValidationErrors == nil {
			break
		}

		return e.complexity.TaskBulletinUpsertResponse.ValidationErrors(childComplexity), true

	case "TaskReportOutput.error":
		if e.complexity.TaskReportOutput.Error == nil {
			break
		}

		return e.complexity.TaskReportOutput.Error(childComplexity), true

	case "TaskReportOutput.message":
		if e.complexity.TaskReportOutput.Message == nil {
			break
		}

		return e.complexity.TaskReportOutput.Message(childComplexity), true

	case "TaskReportOutput.url":
		if e.complexity.TaskReportOutput.URL == nil {
			break
		}

		return e.complexity.TaskReportOutput.URL(childComplexity), true

	case "TaskReportOutput.values":
		if e.complexity.TaskReportOutput.Values == nil {
			break
		}

		return e.complexity.TaskReportOutput.Values(childComplexity), true

	case "TeamMemberDropdown.employee":
		if e.complexity.TeamMemberDropdown.Employee == nil {
			break
		}

		return e.complexity.TeamMemberDropdown.Employee(childComplexity), true

	case "TeamMemberDropdown.teamId":
		if e.complexity.TeamMemberDropdown.TeamID == nil {
			break
		}

		return e.complexity.TeamMemberDropdown.TeamID(childComplexity), true

	case "TeamMemberDropdown.teamName":
		if e.complexity.TeamMemberDropdown.TeamName == nil {
			break
		}

		return e.complexity.TeamMemberDropdown.TeamName(childComplexity), true

	case "Teams.customers":
		if e.complexity.Teams.Customers == nil {
			break
		}

		return e.complexity.Teams.Customers(childComplexity), true

	case "Teams.teamID":
		if e.complexity.Teams.TeamID == nil {
			break
		}

		return e.complexity.Teams.TeamID(childComplexity), true

	case "Teams.teamName":
		if e.complexity.Teams.TeamName == nil {
			break
		}

		return e.complexity.Teams.TeamName(childComplexity), true

	case "WeeklyFeedback.attachments":
		if e.complexity.WeeklyFeedback.Attachments == nil {
			break
		}

		return e.complexity.WeeklyFeedback.Attachments(childComplexity), true

	case "WeeklyFeedback.remarks":
		if e.complexity.WeeklyFeedback.Remarks == nil {
			break
		}

		return e.complexity.WeeklyFeedback.Remarks(childComplexity), true

	case "WeeklyFeedback.status":
		if e.complexity.WeeklyFeedback.Status == nil {
			break
		}

		return e.complexity.WeeklyFeedback.Status(childComplexity), true

	case "WeeklyFeedback.weekDateValue":
		if e.complexity.WeeklyFeedback.WeekDateValue == nil {
			break
		}

		return e.complexity.WeeklyFeedback.WeekDateValue(childComplexity), true

	case "WeeklyFeedback.weekNumber":
		if e.complexity.WeeklyFeedback.WeekNumber == nil {
			break
		}

		return e.complexity.WeeklyFeedback.WeekNumber(childComplexity), true

	case "customerFeedback.attachments":
		if e.complexity.CustomerFeedback.Attachments == nil {
			break
		}

		return e.complexity.CustomerFeedback.Attachments(childComplexity), true

	case "customerFeedback.dateCreated":
		if e.complexity.CustomerFeedback.DateCreated == nil {
			break
		}

		return e.complexity.CustomerFeedback.DateCreated(childComplexity), true

	case "customerFeedback.remarks":
		if e.complexity.CustomerFeedback.Remarks == nil {
			break
		}

		return e.complexity.CustomerFeedback.Remarks(childComplexity), true

	case "customerFeedback.statusTitle":
		if e.complexity.CustomerFeedback.StatusTitle == nil {
			break
		}

		return e.complexity.CustomerFeedback.StatusTitle(childComplexity), true

	case "customerFeedback.statusValue":
		if e.complexity.CustomerFeedback.StatusValue == nil {
			break
		}

		return e.complexity.CustomerFeedback.StatusValue(childComplexity), true

	case "customerResponse.custoMerId":
		if e.complexity.CustomerResponse.CustoMerID == nil {
			break
		}

		return e.complexity.CustomerResponse.CustoMerID(childComplexity), true

	case "customerResponse.custoMerName":
		if e.complexity.CustomerResponse.CustoMerName == nil {
			break
		}

		return e.complexity.CustomerResponse.CustoMerName(childComplexity), true

	case "customerResponse.shipTo":
		if e.complexity.CustomerResponse.ShipTo == nil {
			break
		}

		return e.complexity.CustomerResponse.ShipTo(childComplexity), true

	case "customerResponse.soldTo":
		if e.complexity.CustomerResponse.SoldTo == nil {
			break
		}

		return e.complexity.CustomerResponse.SoldTo(childComplexity), true

	case "fetchCustomerFeedbackResponse.customerFeedback":
		if e.complexity.FetchCustomerFeedbackResponse.CustomerFeedback == nil {
			break
		}

		return e.complexity.FetchCustomerFeedbackResponse.CustomerFeedback(childComplexity), true

	case "fetchCustomerFeedbackResponse.error":
		if e.complexity.FetchCustomerFeedbackResponse.Error == nil {
			break
		}

		return e.complexity.FetchCustomerFeedbackResponse.Error(childComplexity), true

	case "fetchCustomerFeedbackResponse.message":
		if e.complexity.FetchCustomerFeedbackResponse.Message == nil {
			break
		}

		return e.complexity.FetchCustomerFeedbackResponse.Message(childComplexity), true

	case "flashBulletin.attachments":
		if e.complexity.FlashBulletin.Attachments == nil {
			break
		}

		return e.complexity.FlashBulletin.Attachments(childComplexity), true

	case "flashBulletin.description":
		if e.complexity.FlashBulletin.Description == nil {
			break
		}

		return e.complexity.FlashBulletin.Description(childComplexity), true

	case "flashBulletin.id":
		if e.complexity.FlashBulletin.ID == nil {
			break
		}

		return e.complexity.FlashBulletin.ID(childComplexity), true

	case "flashBulletin.recipients":
		if e.complexity.FlashBulletin.Recipients == nil {
			break
		}

		return e.complexity.FlashBulletin.Recipients(childComplexity), true

	case "flashBulletin.title":
		if e.complexity.FlashBulletin.Title == nil {
			break
		}

		return e.complexity.FlashBulletin.Title(childComplexity), true

	case "flashBulletin.type":
		if e.complexity.FlashBulletin.Type == nil {
			break
		}

		return e.complexity.FlashBulletin.Type(childComplexity), true

	case "flashBulletin.validityDate":
		if e.complexity.FlashBulletin.ValidityDate == nil {
			break
		}

		return e.complexity.FlashBulletin.ValidityDate(childComplexity), true

	case "flashBulletinData.attachments":
		if e.complexity.FlashBulletinData.Attachments == nil {
			break
		}

		return e.complexity.FlashBulletinData.Attachments(childComplexity), true

	case "flashBulletinData.createdDate":
		if e.complexity.FlashBulletinData.CreatedDate == nil {
			break
		}

		return e.complexity.FlashBulletinData.CreatedDate(childComplexity), true

	case "flashBulletinData.description":
		if e.complexity.FlashBulletinData.Description == nil {
			break
		}

		return e.complexity.FlashBulletinData.Description(childComplexity), true

	case "flashBulletinData.endDate":
		if e.complexity.FlashBulletinData.EndDate == nil {
			break
		}

		return e.complexity.FlashBulletinData.EndDate(childComplexity), true

	case "flashBulletinData.id":
		if e.complexity.FlashBulletinData.ID == nil {
			break
		}

		return e.complexity.FlashBulletinData.ID(childComplexity), true

	case "flashBulletinData.modifiedDate":
		if e.complexity.FlashBulletinData.ModifiedDate == nil {
			break
		}

		return e.complexity.FlashBulletinData.ModifiedDate(childComplexity), true

	case "flashBulletinData.startDate":
		if e.complexity.FlashBulletinData.StartDate == nil {
			break
		}

		return e.complexity.FlashBulletinData.StartDate(childComplexity), true

	case "flashBulletinData.status":
		if e.complexity.FlashBulletinData.Status == nil {
			break
		}

		return e.complexity.FlashBulletinData.Status(childComplexity), true

	case "flashBulletinData.title":
		if e.complexity.FlashBulletinData.Title == nil {
			break
		}

		return e.complexity.FlashBulletinData.Title(childComplexity), true

	case "flashBulletinData.type":
		if e.complexity.FlashBulletinData.Type == nil {
			break
		}

		return e.complexity.FlashBulletinData.Type(childComplexity), true

	case "flashBulletinResponse.error":
		if e.complexity.FlashBulletinResponse.Error == nil {
			break
		}

		return e.complexity.FlashBulletinResponse.Error(childComplexity), true

	case "flashBulletinResponse.message":
		if e.complexity.FlashBulletinResponse.Message == nil {
			break
		}

		return e.complexity.FlashBulletinResponse.Message(childComplexity), true

	case "flashBulletinResponse.validationErrors":
		if e.complexity.FlashBulletinResponse.ValidationErrors == nil {
			break
		}

		return e.complexity.FlashBulletinResponse.ValidationErrors(childComplexity), true

	case "flashBulletinUpsertResponse.error":
		if e.complexity.FlashBulletinUpsertResponse.Error == nil {
			break
		}

		return e.complexity.FlashBulletinUpsertResponse.Error(childComplexity), true

	case "flashBulletinUpsertResponse.message":
		if e.complexity.FlashBulletinUpsertResponse.Message == nil {
			break
		}

		return e.complexity.FlashBulletinUpsertResponse.Message(childComplexity), true

	case "flashBulletinUpsertResponse.validationErrors":
		if e.complexity.FlashBulletinUpsertResponse.ValidationErrors == nil {
			break
		}

		return e.complexity.FlashBulletinUpsertResponse.ValidationErrors(childComplexity), true

	case "kpiResponse.error":
		if e.complexity.KpiResponse.Error == nil {
			break
		}

		return e.complexity.KpiResponse.Error(childComplexity), true

	case "kpiResponse.errorCode":
		if e.complexity.KpiResponse.ErrorCode == nil {
			break
		}

		return e.complexity.KpiResponse.ErrorCode(childComplexity), true

	case "kpiResponse.message":
		if e.complexity.KpiResponse.Message == nil {
			break
		}

		return e.complexity.KpiResponse.Message(childComplexity), true

	case "kpiResponse.validationErrors":
		if e.complexity.KpiResponse.ValidationErrors == nil {
			break
		}

		return e.complexity.KpiResponse.ValidationErrors(childComplexity), true

	case "listFlashBulletinResponse.error":
		if e.complexity.ListFlashBulletinResponse.Error == nil {
			break
		}

		return e.complexity.ListFlashBulletinResponse.Error(childComplexity), true

	case "listFlashBulletinResponse.flashBulletins":
		if e.complexity.ListFlashBulletinResponse.FlashBulletins == nil {
			break
		}

		return e.complexity.ListFlashBulletinResponse.FlashBulletins(childComplexity), true

	case "listFlashBulletinResponse.message":
		if e.complexity.ListFlashBulletinResponse.Message == nil {
			break
		}

		return e.complexity.ListFlashBulletinResponse.Message(childComplexity), true

	case "listTaskBulletinResponse.error":
		if e.complexity.ListTaskBulletinResponse.Error == nil {
			break
		}

		return e.complexity.ListTaskBulletinResponse.Error(childComplexity), true

	case "listTaskBulletinResponse.message":
		if e.complexity.ListTaskBulletinResponse.Message == nil {
			break
		}

		return e.complexity.ListTaskBulletinResponse.Message(childComplexity), true

	case "listTaskBulletinResponse.taskBulletins":
		if e.complexity.ListTaskBulletinResponse.TaskBulletins == nil {
			break
		}

		return e.complexity.ListTaskBulletinResponse.TaskBulletins(childComplexity), true

	case "listTaskBulletinResponse.totalPages":
		if e.complexity.ListTaskBulletinResponse.TotalPages == nil {
			break
		}

		return e.complexity.ListTaskBulletinResponse.TotalPages(childComplexity), true

	case "principalDropDownData.principalName":
		if e.complexity.PrincipalDropDownData.PrincipalName == nil {
			break
		}

		return e.complexity.PrincipalDropDownData.PrincipalName(childComplexity), true

	case "retriveInfoFlashBulletinleResponse.error":
		if e.complexity.RetriveInfoFlashBulletinleResponse.Error == nil {
			break
		}

		return e.complexity.RetriveInfoFlashBulletinleResponse.Error(childComplexity), true

	case "retriveInfoFlashBulletinleResponse.flashBulletinData":
		if e.complexity.RetriveInfoFlashBulletinleResponse.FlashBulletinData == nil {
			break
		}

		return e.complexity.RetriveInfoFlashBulletinleResponse.FlashBulletinData(childComplexity), true

	case "retriveInfoFlashBulletinleResponse.message":
		if e.complexity.RetriveInfoFlashBulletinleResponse.Message == nil {
			break
		}

		return e.complexity.RetriveInfoFlashBulletinleResponse.Message(childComplexity), true

	case "taskBulletinData.attachments":
		if e.complexity.TaskBulletinData.Attachments == nil {
			break
		}

		return e.complexity.TaskBulletinData.Attachments(childComplexity), true

	case "taskBulletinData.creationDate":
		if e.complexity.TaskBulletinData.CreationDate == nil {
			break
		}

		return e.complexity.TaskBulletinData.CreationDate(childComplexity), true

	case "taskBulletinData.description":
		if e.complexity.TaskBulletinData.Description == nil {
			break
		}

		return e.complexity.TaskBulletinData.Description(childComplexity), true

	case "taskBulletinData.id":
		if e.complexity.TaskBulletinData.ID == nil {
			break
		}

		return e.complexity.TaskBulletinData.ID(childComplexity), true

	case "taskBulletinData.principalName":
		if e.complexity.TaskBulletinData.PrincipalName == nil {
			break
		}

		return e.complexity.TaskBulletinData.PrincipalName(childComplexity), true

	case "taskBulletinData.salesRep":
		if e.complexity.TaskBulletinData.SalesRep == nil {
			break
		}

		return e.complexity.TaskBulletinData.SalesRep(childComplexity), true

	case "taskBulletinData.targetDate":
		if e.complexity.TaskBulletinData.TargetDate == nil {
			break
		}

		return e.complexity.TaskBulletinData.TargetDate(childComplexity), true

	case "taskBulletinData.teamId":
		if e.complexity.TaskBulletinData.TeamID == nil {
			break
		}

		return e.complexity.TaskBulletinData.TeamID(childComplexity), true

	case "taskBulletinData.teamName":
		if e.complexity.TaskBulletinData.TeamName == nil {
			break
		}

		return e.complexity.TaskBulletinData.TeamName(childComplexity), true

	case "taskBulletinData.title":
		if e.complexity.TaskBulletinData.Title == nil {
			break
		}

		return e.complexity.TaskBulletinData.Title(childComplexity), true

	case "taskBulletinData.typeTitle":
		if e.complexity.TaskBulletinData.TypeTitle == nil {
			break
		}

		return e.complexity.TaskBulletinData.TypeTitle(childComplexity), true

	case "taskBulletinData.typeValue":
		if e.complexity.TaskBulletinData.TypeValue == nil {
			break
		}

		return e.complexity.TaskBulletinData.TypeValue(childComplexity), true

	case "taskReport.activeDirectory":
		if e.complexity.TaskReport.ActiveDirectory == nil {
			break
		}

		return e.complexity.TaskReport.ActiveDirectory(childComplexity), true

	case "taskReport.bulletinTitle":
		if e.complexity.TaskReport.BulletinTitle == nil {
			break
		}

		return e.complexity.TaskReport.BulletinTitle(childComplexity), true

	case "taskReport.bulletinType":
		if e.complexity.TaskReport.BulletinType == nil {
			break
		}

		return e.complexity.TaskReport.BulletinType(childComplexity), true

	case "taskReport.creationDate":
		if e.complexity.TaskReport.CreationDate == nil {
			break
		}

		return e.complexity.TaskReport.CreationDate(childComplexity), true

	case "taskReport.customerName":
		if e.complexity.TaskReport.CustomerName == nil {
			break
		}

		return e.complexity.TaskReport.CustomerName(childComplexity), true

	case "taskReport.principalName":
		if e.complexity.TaskReport.PrincipalName == nil {
			break
		}

		return e.complexity.TaskReport.PrincipalName(childComplexity), true

	case "taskReport.targetDate":
		if e.complexity.TaskReport.TargetDate == nil {
			break
		}

		return e.complexity.TaskReport.TargetDate(childComplexity), true

	case "taskReport.teamName":
		if e.complexity.TaskReport.TeamName == nil {
			break
		}

		return e.complexity.TaskReport.TeamName(childComplexity), true

	case "taskReport.userName":
		if e.complexity.TaskReport.UserName == nil {
			break
		}

		return e.complexity.TaskReport.UserName(childComplexity), true

	case "taskReport.weeklyFeedback":
		if e.complexity.TaskReport.WeeklyFeedback == nil {
			break
		}

		return e.complexity.TaskReport.WeeklyFeedback(childComplexity), true

	case "titleValue.type":
		if e.complexity.TitleValue.Type == nil {
			break
		}

		return e.complexity.TitleValue.Type(childComplexity), true

	case "validationMessage.errorCode":
		if e.complexity.ValidationMessage.ErrorCode == nil {
			break
		}

		return e.complexity.ValidationMessage.ErrorCode(childComplexity), true

	case "validationMessage.message":
		if e.complexity.ValidationMessage.Message == nil {
			break
		}

		return e.complexity.ValidationMessage.Message(childComplexity), true

	case "validationMessage.row":
		if e.complexity.ValidationMessage.Row == nil {
			break
		}

		return e.complexity.ValidationMessage.Row(childComplexity), true

	case "validationResult.error":
		if e.complexity.ValidationResult.Error == nil {
			break
		}

		return e.complexity.ValidationResult.Error(childComplexity), true

	case "validationResult.validationMessage":
		if e.complexity.ValidationResult.ValidationMessage == nil {
			break
		}

		return e.complexity.ValidationResult.ValidationMessage(childComplexity), true

	case "validationResult.validationTimeTaken":
		if e.complexity.ValidationResult.ValidationTimeTaken == nil {
			break
		}

		return e.complexity.ValidationResult.ValidationTimeTaken(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/gqls/customer_target.graphqls", Input: `input CustomerTargetInput{
    id: String 
    type: String !
    category: String !
    productBrandId: String !
    year: Int !
    answers: [TargetValues!]!
    isDeleted: Boolean
}

input GetTargetCustomerRequest {
    isExcel: Boolean!
    id: String
    type: String
    category: String
    productBrandId: String
    productBrandName: String
    year: Int
    pageNo: Int
    limit: Int
}
type GetTargetCustomerResponse {
    url: String!
    error: Boolean!
    message: String
    totalPage: Int!
    data: [TargetCustomer]!
}

type TargetCustomer {
    customerTargetId: String
    type: String
    category: String
    productBrandId: String
    productBrandName: String
    year: Int
    targets: [Target]
}

type Target {
    month: Int
    value: Float
}

type CustomerGroupResponse {
    error: Boolean!
    message: String!
    custoMerData:[CustomerGroup!]!
}
type CustomerGroup {
   inDusTrialCode: String!
   customeDetails: [customerResponse!]!
}

type customerResponse {
    custoMerId: String!
    custoMerName: String!
    soldTo: String!
    shipTo: String!
}

input CustomerGroupInput {
    teamId: String
    customerGroup: [String]
}

extend type Mutation {
    saveCustomerTarget (input: CustomerTargetInput!):kpiResponse!
}

extend type Query {
    getTargetCustomer(input: GetTargetCustomerRequest!): GetTargetCustomerResponse!
    getCustomerGroup(input: CustomerGroupInput): CustomerGroupResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/fetch_customer_contact.graphqls", Input: `type CustomerContact{
  id: String!
  contactName: String!
  designation: String!
  contactNumber: String!
  contactImage: String!
  customerId: String!
  customerName: String!  
  hasConsent:Boolean!
  emailId: String!
}

input GetCustomerContactRequest {
    id: String
    customerId: String
    teamMememberCustomerID: String
}

type GetCustomerContactResponse{
  getCustomerContact: [CustomerContact!]!
}

extend type Query {
  getGetCustomerContacts(input: GetCustomerContactRequest): GetCustomerContactResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/fetch_item.graphqls", Input: `input GetBrandProductRequest {
  targetTeam: String
  brandId: String
  teamProductId: String
  productId: String
  isPriority: Boolean
  searchItem: String
  isActive: Boolean!
  isKpi: Boolean
}

type GetKpiBrandProductResponse{
  error: Boolean!
  message: String!
  errorCode: Int!
  brands: [KpiBrandItem!]!
}

type KpiBrandItem{
  brandId: String!
  brandName: String!
  products: [KpiProductItem!]!
}

type KpiProductItem{
  teamProductId: String!
  productId: String!
  principalName: String!
  materialDescription: String!
  isPriority: Boolean!
}

extend type Query {
  getKpiBrandProduct(input: GetBrandProductRequest!): GetKpiBrandProductResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/fetch_kpi.graphqls", Input: `input getKpiInput {
  parentKpiId:String
  kpiId:String
  kpiVersionId:String
  teamId:String
  brandId:String
  teamProductId:String
  month:Int
  year:Int
  searchItem:String
  limit:Int
  pageNo:Int
}

type GetKpi {
  parentKpiId: String!
  productKpiId: String!
  brandKpiId: String!
  productKpiVersionId: String!
  brandKpiVersionId: String!
  kpiName: String!
  targetTeamId:String!
  targetTeamName:String!
  effectiveMonth: Int!
  effectiveYear: Int!
  isPriority: Boolean!
  targetProduct:[String!]!
  targetBrand:[String!]!
  productDesign:[KPIDesignRes!]!
  brandDesign:[KPIDesignRes!]!
}

type KPIDesignRes {
  name: String!
  active: Boolean!
  categoryId: Int!
  category:String!
  type: String!
  effectiveStartDate:String!
  effectiveEndDate:String!
  questions: [KPIQuestionRes!]!
}

type KPIQuestionRes {
  questionNumber:Int!
  title: String!
  type: String!
  optionValues: [String!]!
  active: Boolean!
  required: Boolean!
}

type GetKpiResponse {
  error: Boolean!
  message: String
  errorCode: Int!
  totalPage: Int!
  data: [GetKpi!]!
}

input KpiOfflineInput {
  startDate: Int
  endDate: Int
}

type KpiOfflineResponse {
  error: Boolean!
  errorCode: Int!
  message: String!
  getKpiOffline: [GetKpiOffline!]!
  kpiProductBrandAnswer: [KpiProductBrandAnswer!]!
}

type GetKpiOffline {
  parentKpiId: String!
  productKpiId: String!
  brandKpiId: String!
  productKpiVersionId: String!
  brandKpiVersionId: String!
  kpiName: String!
  targetTeamId:String!
  targetTeamName:String!
  effectiveMonth: Int!
  effectiveYear: Int!
  isPriority: Boolean!
  targetProduct: [String!]
  targetBrand: [String!]
  productDesign:[KPIDesignRes!]!
  brandDesign:[KPIDesignRes!]!
}

type KpiProductBrandAnswer {
  eventID: String!
  teamCustomerID: String!
  brands: [KpiBrandItemOffline!]!
}

type KpiBrandItemOffline {
  brandId: String!
  brandName: String!
  brandKpiVersionId: String
  brandKpiAnswer: [KpiAnswer!]!
  products: [KpiProductItemOffline!]!
}

type KpiProductItemOffline {
  teamId: String!
  teamProductId: String!
  productId: String!
  principalName: String!
  materialDescription: String!
  isPriority: Boolean!
  productKpiVersionId: String
  productKpiAnswer: [KpiAnswer!]!
}

extend type Query {
  getKpis(input:getKpiInput): GetKpiResponse!
  getKpiQuestionAnswerOffline(input:KpiOfflineInput!): KpiOfflineResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/fetch_kpi_answer.graphqls", Input: `type KpiAnswer{
  id: String!
  answer: [KPIAnswerRes!]!
  kpiId:String!
  kpiVersionId: String!
  category: Int!
  teamMemberCustomerId: String!
  scheduleEvent: String!
  targetItem: String!
}

input GetKpiAnswerRequest {
    kpiId: String!
    kpiVersionId: String!
    category: Int!
    teamMemberCustomerId: String!
    scheduleEvent: String!
    targetItem: String!
  }

type GetKpiAnswerResponse{
    error: Boolean!
    message: String!
    errorCode: Int!
    isOldAnswer: Boolean!
    isProposedStock: Boolean!
    getAnswers: [KpiAnswer!]!
}

type KPIAnswerRes {
  questioNnumber: Int!
  value: [String!]!
}   

extend type Query {
  getKpiAnswers(input: GetKpiAnswerRequest): GetKpiAnswerResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/fetch_kpi_target.graphqls", Input: `type KpiTarget{
    id: String!
    year:Int!
    region:String!
    country:String!
    currency:String!
    plants:Int!
    bergu:String!
    status:String!
    teamName:String!
    salesRep:String!
    target:[KpiTargetRes!]!
}

type KpiTargetRes {
    kpiTitle:String!
    kpiValue:String!
    values:[TargetValueRes!]!
}   

type TargetValueRes{
    month:Int!
    value:Float!
}

input GetKpiTargetRequest {
    id: String
    year: Int
    status: String
    salesRepId: String
    teamId: String
  }

type GetKpiTargetResponse{
  error: Boolean!
  message: String!
  getTargets: [KpiTarget!]!
}
type KpiTargetTitle{
  title:String!
  value:String!
  description:String!
}
type KpiTaregetTitleResponse{
  error: Boolean!
  message: String!
  kpiTargetTitles:[KpiTargetTitle!]!
}
extend type Query {
  getKpiTargets(input: GetKpiTargetRequest): GetKpiTargetResponse!
  getKpiTargetTitle:KpiTaregetTitleResponse
}`, BuiltIn: false},
	{Name: "graph/gqls/flash_bulletin.graphqls", Input: `type flashBulletin{
  id:String!
  type:String!
  title:String!
  description:String!
  validityDate:String!
  attachments:[Attachment!]!
  recipients:[Recipients!]!
}

type Attachment{
  id: String!
  url: String!
  filename: String!
}

type Recipients{
  id:String!
  description:String!
}

input listFlashBulletinInput {
  type: Int
  isActive: Boolean
  startDate: String
  endDate: String
  receipientId: String
  teamMemberCustomerId: String
}

type flashBulletinResponse {
  error: Boolean!
  message: String!
  validationErrors: [validationMessage]
}

type flashBulletinData{
  id: String!
  title:String!
  description:String!
  status:Boolean!
  startDate:String!
  endDate:String!
  type: String!
  createdDate: String!
  modifiedDate: String!
  attachments: [String!]!
}

type listFlashBulletinResponse {
  error: Boolean!
  message: String!
  flashBulletins: [flashBulletinData!]!
}


input retriveInfoFlashBulletinInput{
  bulletinID: String!
}

type retriveInfoFlashBulletinleResponse {
  error: Boolean!
  message: String!
  flashBulletinData: flashBulletin
}

input AttachmentUpsertInput {
  id: String
  filename: String!
  url: String!
}

input flashBulletinUpsertInput {
  activeDirName:String!
  id: String
  type: Int!
  title: String!
  description: String!
	validity_date_start: String!
	validity_date_end: String!
  attachments: [AttachmentUpsertInput!]!
  recipients: [String!]!
  isDeleted: Boolean
  isActive: Boolean
  customerGroup: [String]
}

type flashBulletinUpsertResponse {
  error: Boolean!
  message: String!
  validationErrors: [validationMessage]
}

extend type Mutation {
	upsertFlashBulletin(input: flashBulletinUpsertInput!): flashBulletinUpsertResponse!
}

extend type Query {
	retriveFlashBulletinSingle(input: retriveInfoFlashBulletinInput!): retriveInfoFlashBulletinleResponse!
  listFlashbulletin(input: listFlashBulletinInput!): listFlashBulletinResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/pictures_retrieve.graphqls", Input: `input PicturesInput{
  teamID: String!
  type: String!
  productID: [String]
  brandID: [String]
  customerID: [String]
  startDate: String!
  endDate: String!
}

input PictureZipInput{
  selections:[String!]!
  type: String!
}

input ListInput{
 teamID: String
}

type RetrievePicturesResponse {
  error: Boolean!
  message: String!
  data: [Teams!]!
}

type RetrievePictureZip {
  error: Boolean!
  message: String!
  url: String!
}

type Teams {
  teamID:String!
  teamName:String!
  customers:[Customer!]
}

type Customer {
  customerID:String!
  promotion: Images!
  customerName:String!
  product: Images!
  survey: Images!
  brand: Images!
  competitor: Images!
}

type Images {
  name:String!
  url:[String!]!
}

type CustomerList {
  id:String!
  name:String!
}

type CustomerListResponse {
  error: Boolean!
  message: String!
  data: [CustomerList!]!
}

type ProductList {
  id:String!
  name:String!
}

type ProductListResponse {
  error: Boolean!
  message: String!
  data: [ProductList!]!
}

type BrandList {
  id:String!
  name:String!
}

type BrandListResponse {
  error: Boolean!
  message: String!
  data: [BrandList!]!
}

extend type Query {
  retrievePictures(input: PicturesInput!): RetrievePicturesResponse!
  retrievePictureZip(input: PictureZipInput!): RetrievePictureZip!
  retrievePictureCustomerList(input:ListInput):CustomerListResponse!
  retrievePictureProductList(input:ListInput):ProductListResponse!
  retrievePictureBrandList(input:ListInput):BrandListResponse!
}
`, BuiltIn: false},
	{Name: "graph/gqls/save_customer_contact.graphqls", Input: `input CustomerContactRequest {
  id: String
  contactName: String!
  designation: String!
  contactNumber: String!
  contactImage: String
  authorActiveDirName: String!
  customerId: String!
  emailId: String
}

input CustomerContactDeleteRequest {
  id: String!
  authorActiveDirName: String!
}

extend type Mutation {
  upsertCustomerContact(input: CustomerContactRequest!): kpiResponse!
  deleteCustomerContact(input: CustomerContactDeleteRequest!): kpiResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/save_kpi.graphqls", Input: `input UpsertKpiRequest {
  id: String
  name: String!
  targetTeam: String!
  targetProducts: [String!]!
  targetBrand: [String!]!
  effectiveMonth: Int!
  effectiveYear: Int!
  isPriority: Boolean!
  brandDesign: [KPI!]!
  productDesign: [KPI!]!
  isDeleted: Boolean
}

input KPI {
  name: String
  type: String!
  active: Boolean
  category: Int!
  effectiveStartDate: String
  effectiveEndDate: String
  questions: [KPIQuestion!]!
}

input KPIDesign {
  name: String
  active: Boolean
  category: Int!
  type: String
  effectiveStartDate:String
  effectiveEndDate:String
  questions: [KPIQuestion!]!
}


input KPIQuestion {
  questionNumber:Int!
  title: String!
  type: String!
  optionValues: [String!]!
  active: Boolean
  required: Boolean
}

extend type Mutation {
  saveKpi(input: UpsertKpiRequest!): kpiResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/save_kpi_answer.graphqls", Input: `input KpiAnswerRequest {
  kpiVersionId: String!
  category: Int!
  answers: [KPIAnswerStruct!]!
  authorActiveDirName: String!
  teamMemberCustomerId: String!
  targetItem: String!
  scheduleEvent: String!
}

input KPIAnswerStruct {
  questioNnumber: Int!
  value: [String!]!
}   

extend type Mutation {
  saveKpiAnswers(input: KpiAnswerRequest!): kpiResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/save_kpi_target.graphqls", Input: `input KPITargetInput{
    id:String
    salesRepId:String
    teamId:String
    year:Int!
    target:[KPITargets!]!
    authorActiveDirName: String!
}

input KPITargets{
    kpiTitle:String!
    values:[TargetValues!]!
}

input TargetValues{
    month:Int!
    value:Float!
}

input ActionKPITargetInput{
    id:String!
    action:Boolean!
    authorActiveDirName: String!
}

extend type Mutation {
  upsertKpiTarget(input: KPITargetInput!): kpiResponse!
  actionKpiTarget(input: ActionKPITargetInput!): kpiResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type validationMessage {
  row: Int!
  errorCode: Int!
  message: String!
}

type validationResult {
  error: Boolean!
  validationTimeTaken: String!
  validationMessage: [validationMessage]
}

type kpiResponse {
  error: Boolean!
  message: String!
  errorCode: Int!
  validationErrors: [validationMessage]
}

type Query {
  todos: [String!]!
}`, BuiltIn: false},
	{Name: "graph/gqls/task_bulletin.graphqls", Input: `input fetchCustomerFeedbackInput {
    teamMemberCustomerId: String!
    taskBulletinId: String!
}

type fetchCustomerFeedbackResponse {
    error: Boolean!
    message: String!
    customerFeedback:[customerFeedback!]!
}

type customerFeedback {
    statusTitle: String!
    statusValue: String!
    remarks: String!
    dateCreated: String!
    attachments:[Attachment!]!
}

input CustomerTaskFeedBackInput {
    taskBulletinId: String!
    teamMemberCustomerId: String!
    status: String!
    remarks: String
    attachments: [attachments]
}

input attachments{
  id: String
  url: String!
  filename: String!
}

type CustomerTaskFeedBackResponse {
    error: Boolean!
    message: String
    validationErrors: [validationMessage]
}

type TaskBulletinUpsertResponse{
    error: Boolean!
    message: String!
    validationErrors: [validationMessage]
}

input TaskBulletinUpsertInput{
    id: String           
	creationDate: String!
	targetDate: String! 
	teamMemberCustomer: [String]!
    type: String!
    title: String! 
	description: String!
    principalName: String!
    isDeleted: Boolean
    attachments:[attachments]
}

input listTaskBulletinInput {
  id: String
  type: String
  isActive: Boolean
  creationDate: String
  targetDate: String
  teamMemberId: String
  teamMemberCustomerId: String
  pageNo: Int
  limit:  Int
  searchItem: String
}

input TaskBulletinTitleInput {
    teamID: String
}

type TaskBulletinTitleResponse {
  error: Boolean!
  message: String
  typeDetails: [titleValue!]!
}

type titleValue {
    type: String!
}

type listTaskBulletinResponse {
  error: Boolean!
  message: String!
  totalPages: Int!
  taskBulletins: [taskBulletinData!]!
}

type taskBulletinData{
  id: String!
  creationDate: String!
  targetDate: String!
  typeTitle: String!
  typeValue: String!
  principalName: String!
  teamId: String
  teamName: String!
  title: String!
  description: String!
  salesRep: [SalesRepData!]!
  attachments: [Attachment!]!
}

type SalesRepData{
    teamMemberId: String
    userId: String
    firstName: String
    lastName: String
    activeDirectory: String
    email: String
    approvalRoleTitle: String
    approvalRoleValues: String
    customers:[CustomerData]
}

type CustomerData{
    customerID: String
    teamMemberCustomerId: String
    customerName: String
    soldTo: Int
    shipTo: Int
}

input TaskBulletinInput{
    teamID: [String]
    teamMemberId: String
    teamMemberCustomerId: String
    customerID: String
    onlySalesrep: Boolean
}

type TaskBulletinResponse{
    error: Boolean!
    message: String!
    dropDown: [TeamMemberDropdown]!
}

type TeamMemberDropdown{
    teamId: String
    teamName: String
    employee: [SalesRepDataDropDown]
}

type SalesRepDataDropDown{
    teamMemberId: String
    userId: String
    firstName: String
    lastName: String
    activeDirectory: String
    email: String
    approvalRoleTitle: String
    approvalRoleValues: String
    customers:[CustomerDataDropDown]
}

type CustomerDataDropDown{
    customerID: String
    teamMemberCustomerId: String
    customerName: String
    soldTo: Int
    shipTo: Int
}

input PrincipalDropDownInput{
    teamID: String! 
}

type PrincipalDropDownResponse{
    error: Boolean!
    message: String
    data: [principalDropDownData]!  
}

type principalDropDownData{
    principalName: String!
}

extend type Mutation {
    upsertTaskBulletin(input: TaskBulletinUpsertInput!): TaskBulletinUpsertResponse!
    insertCustomerTaskFeedBack(input: CustomerTaskFeedBackInput!): CustomerTaskFeedBackResponse!
}

extend type Query {
    listTaskBulletin(input: listTaskBulletinInput): listTaskBulletinResponse!
	fetchCustomerFeedback(input: fetchCustomerFeedbackInput!): fetchCustomerFeedbackResponse!
    teamToCustomerDropDown(input: TaskBulletinInput):TaskBulletinResponse!
    principalDropDown(input: PrincipalDropDownInput!): PrincipalDropDownResponse!
    taskBulletinTitleDropDown(input: TaskBulletinTitleInput): TaskBulletinTitleResponse!
}`, BuiltIn: false},
	{Name: "graph/gqls/task_bulletin_report.graphqls", Input: `type taskReport {
    bulletinTitle:  String
    bulletinType:   String
    principalName:  String
    customerName:   String
    teamName:       String
    userName:       String
    activeDirectory:String
    creationDate:   String
    targetDate:     String
    weeklyFeedback: [WeeklyFeedback]
}

type WeeklyFeedback {
    weekNumber:     Int
    weekDateValue:  String
    status:         String
    remarks:        String
    attachments:    [Attachment]
}

type TaskReportOutput {
    error:   Boolean!
    message: String!
    url:     String!
    values:  [taskReport]
}

input TaskBulletinReportInput {
    isExcel: Boolean!
    tittle: [String!]!
    dateRange: [String!]!
}

extend type Query {
    TaskBuletinReport(input:TaskBulletinReportInput!): TaskReportOutput!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_actionKpiTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ActionKPITargetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNActionKPITargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐActionKPITargetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCustomerContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomerContactDeleteRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCustomerContactDeleteRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactDeleteRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insertCustomerTaskFeedBack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomerTaskFeedBackInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCustomerTaskFeedBackInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTaskFeedBackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveCustomerTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomerTargetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCustomerTargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTargetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveKpiAnswers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.KpiAnswerRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNKpiAnswerRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveKpi_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpsertKpiRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNUpsertKpiRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐUpsertKpiRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertCustomerContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomerContactRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNCustomerContactRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertFlashBulletin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FlashBulletinUpsertInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNflashBulletinUpsertInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinUpsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertKpiTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.KPITargetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNKPITargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertTaskBulletin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TaskBulletinUpsertInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNTaskBulletinUpsertInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinUpsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_TaskBuletinReport_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TaskBulletinReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNTaskBulletinReportInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchCustomerFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FetchCustomerFeedbackInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNfetchCustomerFeedbackInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFetchCustomerFeedbackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCustomerGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CustomerGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOCustomerGroupInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getGetCustomerContacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetCustomerContactRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOGetCustomerContactRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetCustomerContactRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKpiAnswers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetKpiAnswerRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOGetKpiAnswerRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiAnswerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKpiBrandProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBrandProductRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetBrandProductRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetBrandProductRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKpiQuestionAnswerOffline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.KpiOfflineInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNKpiOfflineInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiOfflineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKpiTargets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetKpiTargetRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOGetKpiTargetRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiTargetRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKpis_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetKpiInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOgetKpiInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTargetCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetTargetCustomerRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNGetTargetCustomerRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetTargetCustomerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listFlashbulletin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ListFlashBulletinInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNlistFlashBulletinInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListFlashBulletinInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listTaskBulletin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListTaskBulletinInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOlistTaskBulletinInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListTaskBulletinInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_principalDropDown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PrincipalDropDownInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNPrincipalDropDownInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePictureBrandList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePictureCustomerList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePictureProductList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOListInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePictureZip_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PictureZipInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNPictureZipInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPictureZipInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrievePictures_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PicturesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNPicturesInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPicturesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retriveFlashBulletinSingle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RetriveInfoFlashBulletinInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalNretriveInfoFlashBulletinInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetriveInfoFlashBulletinInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_taskBulletinTitleDropDown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TaskBulletinTitleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOTaskBulletinTitleInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinTitleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_teamToCustomerDropDown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TaskBulletinInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("input"))
		arg0, err = ec.unmarshalOTaskBulletinInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_url(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Attachment_filename(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Attachment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BrandList_id(ctx context.Context, field graphql.CollectedField, obj *model.BrandList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BrandList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BrandList_name(ctx context.Context, field graphql.CollectedField, obj *model.BrandList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BrandList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BrandListResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.BrandListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BrandListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BrandListResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.BrandListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BrandListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BrandListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.BrandListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BrandListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BrandList)
	fc.Result = res
	return ec.marshalNBrandList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerID(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_promotion(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Images)
	fc.Result = res
	return ec.marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_product(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Images)
	fc.Result = res
	return ec.marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_survey(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Survey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Images)
	fc.Result = res
	return ec.marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_brand(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Images)
	fc.Result = res
	return ec.marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_competitor(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competitor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Images)
	fc.Result = res
	return ec.marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_contactName(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_designation(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Designation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_contactNumber(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_contactImage(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_customerId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_customerName(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_hasConsent(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasConsent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerContact_emailId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerContact",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerData_customerID(ctx context.Context, field graphql.CollectedField, obj *model.CustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerData_teamMemberCustomerId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMemberCustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerData_customerName(ctx context.Context, field graphql.CollectedField, obj *model.CustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerData_soldTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoldTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerData_shipTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerDataDropDown_customerID(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerDataDropDown_teamMemberCustomerId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMemberCustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerDataDropDown_customerName(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerDataDropDown_soldTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoldTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerDataDropDown_shipTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerGroup_inDusTrialCode(ctx context.Context, field graphql.CollectedField, obj *model.CustomerGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InDusTrialCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerGroup_customeDetails(ctx context.Context, field graphql.CollectedField, obj *model.CustomerGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomeDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerResponse)
	fc.Result = res
	return ec.marshalNcustomerResponse2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerGroupResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CustomerGroupResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerGroupResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerGroupResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.CustomerGroupResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerGroupResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerGroupResponse_custoMerData(ctx context.Context, field graphql.CollectedField, obj *model.CustomerGroupResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerGroupResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustoMerData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerGroup)
	fc.Result = res
	return ec.marshalNCustomerGroup2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerList_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerList_name(ctx context.Context, field graphql.CollectedField, obj *model.CustomerList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerListResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CustomerListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerListResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.CustomerListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CustomerListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerList)
	fc.Result = res
	return ec.marshalNCustomerList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerTaskFeedBackResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.CustomerTaskFeedBackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerTaskFeedBackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerTaskFeedBackResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.CustomerTaskFeedBackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerTaskFeedBackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerTaskFeedBackResponse_validationErrors(ctx context.Context, field graphql.CollectedField, obj *model.CustomerTaskFeedBackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerTaskFeedBackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCustomerContactResponse_getCustomerContact(ctx context.Context, field graphql.CollectedField, obj *model.GetCustomerContactResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCustomerContactResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetCustomerContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerContact)
	fc.Result = res
	return ec.marshalNCustomerContact2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_parentKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_productKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_brandKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_productKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_brandKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_kpiName(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_targetTeamId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetTeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_targetTeamName(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetTeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_effectiveMonth(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_effectiveYear(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_isPriority(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPriority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_targetProduct(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_targetBrand(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_productDesign(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KPIDesignRes)
	fc.Result = res
	return ec.marshalNKPIDesignRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpi_brandDesign(ctx context.Context, field graphql.CollectedField, obj *model.GetKpi) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpi",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KPIDesignRes)
	fc.Result = res
	return ec.marshalNKPIDesignRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_isOldAnswer(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOldAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_isProposedStock(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProposedStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiAnswerResponse_getAnswers(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiAnswerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiAnswerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAnswers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiAnswer)
	fc.Result = res
	return ec.marshalNKpiAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiBrandProductResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiBrandProductResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiBrandProductResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiBrandProductResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiBrandProductResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiBrandProductResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiBrandProductResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiBrandProductResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiBrandProductResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiBrandProductResponse_brands(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiBrandProductResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiBrandProductResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiBrandItem)
	fc.Result = res
	return ec.marshalNKpiBrandItem2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_parentKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_productKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_brandKpiId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_productKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_brandKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_kpiName(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_targetTeamId(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetTeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_targetTeamName(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetTeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_effectiveMonth(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_effectiveYear(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_isPriority(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPriority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_targetProduct(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_targetBrand(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_productDesign(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KPIDesignRes)
	fc.Result = res
	return ec.marshalNKPIDesignRes2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiOffline_brandDesign(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KPIDesignRes)
	fc.Result = res
	return ec.marshalNKPIDesignRes2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiResponse_totalPage(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetKpi)
	fc.Result = res
	return ec.marshalNGetKpi2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiTargetResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiTargetResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiTargetResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiTargetResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiTargetResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiTargetResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetKpiTargetResponse_getTargets(ctx context.Context, field graphql.CollectedField, obj *model.GetKpiTargetResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetKpiTargetResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTargets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiTarget)
	fc.Result = res
	return ec.marshalNKpiTarget2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetTargetCustomerResponse_url(ctx context.Context, field graphql.CollectedField, obj *model.GetTargetCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetTargetCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetTargetCustomerResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.GetTargetCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetTargetCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetTargetCustomerResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.GetTargetCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetTargetCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetTargetCustomerResponse_totalPage(ctx context.Context, field graphql.CollectedField, obj *model.GetTargetCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetTargetCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetTargetCustomerResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.GetTargetCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetTargetCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TargetCustomer)
	fc.Result = res
	return ec.marshalNTargetCustomer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Images_name(ctx context.Context, field graphql.CollectedField, obj *model.Images) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Images",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Images_url(ctx context.Context, field graphql.CollectedField, obj *model.Images) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Images",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIAnswerRes_questioNnumber(ctx context.Context, field graphql.CollectedField, obj *model.KPIAnswerRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIAnswerRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestioNnumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIAnswerRes_value(ctx context.Context, field graphql.CollectedField, obj *model.KPIAnswerRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIAnswerRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_name(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_active(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_categoryId(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_category(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_type(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_effectiveStartDate(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_effectiveEndDate(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIDesignRes_questions(ctx context.Context, field graphql.CollectedField, obj *model.KPIDesignRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIDesignRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Questions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KPIQuestionRes)
	fc.Result = res
	return ec.marshalNKPIQuestionRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_questionNumber(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_title(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_type(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_optionValues(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptionValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_active(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KPIQuestionRes_required(ctx context.Context, field graphql.CollectedField, obj *model.KPIQuestionRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KPIQuestionRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_id(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_answer(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KPIAnswerRes)
	fc.Result = res
	return ec.marshalNKPIAnswerRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_kpiId(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_kpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_category(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_teamMemberCustomerId(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMemberCustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_scheduleEvent(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScheduleEvent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiAnswer_targetItem(ctx context.Context, field graphql.CollectedField, obj *model.KpiAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItem_brandId(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItem_brandName(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItem_products(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiProductItem)
	fc.Result = res
	return ec.marshalNKpiProductItem2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItemOffline_brandId(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItemOffline_brandName(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItemOffline_brandKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItemOffline_brandKpiAnswer(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandKpiAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiAnswer)
	fc.Result = res
	return ec.marshalNKpiAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiBrandItemOffline_products(ctx context.Context, field graphql.CollectedField, obj *model.KpiBrandItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiBrandItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiProductItemOffline)
	fc.Result = res
	return ec.marshalNKpiProductItemOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemOfflineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiOfflineResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.KpiOfflineResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiOfflineResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiOfflineResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.KpiOfflineResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiOfflineResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiOfflineResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.KpiOfflineResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiOfflineResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiOfflineResponse_getKpiOffline(ctx context.Context, field graphql.CollectedField, obj *model.KpiOfflineResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiOfflineResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetKpiOffline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetKpiOffline)
	fc.Result = res
	return ec.marshalNGetKpiOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiOfflineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiOfflineResponse_kpiProductBrandAnswer(ctx context.Context, field graphql.CollectedField, obj *model.KpiOfflineResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiOfflineResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiProductBrandAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiProductBrandAnswer)
	fc.Result = res
	return ec.marshalNKpiProductBrandAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductBrandAnswerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductBrandAnswer_eventID(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductBrandAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductBrandAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductBrandAnswer_teamCustomerID(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductBrandAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductBrandAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamCustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductBrandAnswer_brands(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductBrandAnswer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductBrandAnswer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiBrandItemOffline)
	fc.Result = res
	return ec.marshalNKpiBrandItemOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemOfflineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItem_teamProductId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItem_productId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItem_principalName(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrincipalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItem_materialDescription(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItem_isPriority(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPriority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_teamId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_teamProductId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_productId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_principalName(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrincipalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_materialDescription(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_isPriority(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPriority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_productKpiVersionId(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiProductItemOffline_productKpiAnswer(ctx context.Context, field graphql.CollectedField, obj *model.KpiProductItemOffline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiProductItemOffline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductKpiAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiAnswer)
	fc.Result = res
	return ec.marshalNKpiAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTaregetTitleResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.KpiTaregetTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTaregetTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTaregetTitleResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.KpiTaregetTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTaregetTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTaregetTitleResponse_kpiTargetTitles(ctx context.Context, field graphql.CollectedField, obj *model.KpiTaregetTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTaregetTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiTargetTitles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.KpiTargetTitle)
	fc.Result = res
	return ec.marshalNKpiTargetTitle2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetTitleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_id(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_year(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_region(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_country(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_currency(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_plants(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_bergu(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bergu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_status(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_teamName(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_salesRep(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesRep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTarget_target(ctx context.Context, field graphql.CollectedField, obj *model.KpiTarget) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTarget",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KpiTargetRes)
	fc.Result = res
	return ec.marshalNKpiTargetRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetRes_kpiTitle(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetRes_kpiValue(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetRes_values(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TargetValueRes)
	fc.Result = res
	return ec.marshalNTargetValueRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValueResᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetTitle_title(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetTitle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetTitle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetTitle_value(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetTitle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetTitle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KpiTargetTitle_description(ctx context.Context, field graphql.CollectedField, obj *model.KpiTargetTitle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "KpiTargetTitle",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveCustomerTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveCustomerTarget_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveCustomerTarget(rctx, args["input"].(model.CustomerTargetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertFlashBulletin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertFlashBulletin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertFlashBulletin(rctx, args["input"].(model.FlashBulletinUpsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FlashBulletinUpsertResponse)
	fc.Result = res
	return ec.marshalNflashBulletinUpsertResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinUpsertResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertCustomerContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertCustomerContact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertCustomerContact(rctx, args["input"].(model.CustomerContactRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCustomerContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCustomerContact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCustomerContact(rctx, args["input"].(model.CustomerContactDeleteRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveKpi(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveKpi_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveKpi(rctx, args["input"].(model.UpsertKpiRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveKpiAnswers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveKpiAnswers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveKpiAnswers(rctx, args["input"].(model.KpiAnswerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertKpiTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertKpiTarget_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertKpiTarget(rctx, args["input"].(model.KPITargetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_actionKpiTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_actionKpiTarget_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ActionKpiTarget(rctx, args["input"].(model.ActionKPITargetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiResponse)
	fc.Result = res
	return ec.marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertTaskBulletin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertTaskBulletin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertTaskBulletin(rctx, args["input"].(model.TaskBulletinUpsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskBulletinUpsertResponse)
	fc.Result = res
	return ec.marshalNTaskBulletinUpsertResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinUpsertResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insertCustomerTaskFeedBack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insertCustomerTaskFeedBack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertCustomerTaskFeedBack(rctx, args["input"].(model.CustomerTaskFeedBackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerTaskFeedBackResponse)
	fc.Result = res
	return ec.marshalNCustomerTaskFeedBackResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTaskFeedBackResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _PrincipalDropDownResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.PrincipalDropDownResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PrincipalDropDownResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PrincipalDropDownResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.PrincipalDropDownResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PrincipalDropDownResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PrincipalDropDownResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.PrincipalDropDownResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PrincipalDropDownResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PrincipalDropDownData)
	fc.Result = res
	return ec.marshalNprincipalDropDownData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownData(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductList_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductList_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductList",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ProductListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.ProductListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.ProductListResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductListResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProductList)
	fc.Result = res
	return ec.marshalNProductList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_todos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Todos(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTargetCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getTargetCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTargetCustomer(rctx, args["input"].(model.GetTargetCustomerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetTargetCustomerResponse)
	fc.Result = res
	return ec.marshalNGetTargetCustomerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetTargetCustomerResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCustomerGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCustomerGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCustomerGroup(rctx, args["input"].(*model.CustomerGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerGroupResponse)
	fc.Result = res
	return ec.marshalNCustomerGroupResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getGetCustomerContacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getGetCustomerContacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGetCustomerContacts(rctx, args["input"].(*model.GetCustomerContactRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetCustomerContactResponse)
	fc.Result = res
	return ec.marshalNGetCustomerContactResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetCustomerContactResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpiBrandProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getKpiBrandProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpiBrandProduct(rctx, args["input"].(model.GetBrandProductRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetKpiBrandProductResponse)
	fc.Result = res
	return ec.marshalNGetKpiBrandProductResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiBrandProductResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpis(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getKpis_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpis(rctx, args["input"].(*model.GetKpiInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetKpiResponse)
	fc.Result = res
	return ec.marshalNGetKpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpiQuestionAnswerOffline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getKpiQuestionAnswerOffline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpiQuestionAnswerOffline(rctx, args["input"].(model.KpiOfflineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.KpiOfflineResponse)
	fc.Result = res
	return ec.marshalNKpiOfflineResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiOfflineResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpiAnswers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getKpiAnswers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpiAnswers(rctx, args["input"].(*model.GetKpiAnswerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetKpiAnswerResponse)
	fc.Result = res
	return ec.marshalNGetKpiAnswerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiAnswerResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpiTargets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getKpiTargets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpiTargets(rctx, args["input"].(*model.GetKpiTargetRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetKpiTargetResponse)
	fc.Result = res
	return ec.marshalNGetKpiTargetResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiTargetResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getKpiTargetTitle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKpiTargetTitle(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.KpiTaregetTitleResponse)
	fc.Result = res
	return ec.marshalOKpiTaregetTitleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTaregetTitleResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retriveFlashBulletinSingle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retriveFlashBulletinSingle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetriveFlashBulletinSingle(rctx, args["input"].(model.RetriveInfoFlashBulletinInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RetriveInfoFlashBulletinleResponse)
	fc.Result = res
	return ec.marshalNretriveInfoFlashBulletinleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetriveInfoFlashBulletinleResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listFlashbulletin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listFlashbulletin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFlashbulletin(rctx, args["input"].(model.ListFlashBulletinInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ListFlashBulletinResponse)
	fc.Result = res
	return ec.marshalNlistFlashBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListFlashBulletinResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePictures(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePictures_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePictures(rctx, args["input"].(model.PicturesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RetrievePicturesResponse)
	fc.Result = res
	return ec.marshalNRetrievePicturesResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePicturesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePictureZip(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePictureZip_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePictureZip(rctx, args["input"].(model.PictureZipInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RetrievePictureZip)
	fc.Result = res
	return ec.marshalNRetrievePictureZip2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePictureZip(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePictureCustomerList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePictureCustomerList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePictureCustomerList(rctx, args["input"].(*model.ListInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerListResponse)
	fc.Result = res
	return ec.marshalNCustomerListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerListResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePictureProductList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePictureProductList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePictureProductList(rctx, args["input"].(*model.ListInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductListResponse)
	fc.Result = res
	return ec.marshalNProductListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductListResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrievePictureBrandList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrievePictureBrandList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrievePictureBrandList(rctx, args["input"].(*model.ListInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BrandListResponse)
	fc.Result = res
	return ec.marshalNBrandListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandListResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listTaskBulletin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listTaskBulletin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListTaskBulletin(rctx, args["input"].(*model.ListTaskBulletinInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ListTaskBulletinResponse)
	fc.Result = res
	return ec.marshalNlistTaskBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListTaskBulletinResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchCustomerFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fetchCustomerFeedback_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchCustomerFeedback(rctx, args["input"].(model.FetchCustomerFeedbackInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FetchCustomerFeedbackResponse)
	fc.Result = res
	return ec.marshalNfetchCustomerFeedbackResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFetchCustomerFeedbackResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_teamToCustomerDropDown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_teamToCustomerDropDown_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TeamToCustomerDropDown(rctx, args["input"].(*model.TaskBulletinInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskBulletinResponse)
	fc.Result = res
	return ec.marshalNTaskBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_principalDropDown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_principalDropDown_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrincipalDropDown(rctx, args["input"].(model.PrincipalDropDownInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrincipalDropDownResponse)
	fc.Result = res
	return ec.marshalNPrincipalDropDownResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_taskBulletinTitleDropDown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_taskBulletinTitleDropDown_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TaskBulletinTitleDropDown(rctx, args["input"].(*model.TaskBulletinTitleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskBulletinTitleResponse)
	fc.Result = res
	return ec.marshalNTaskBulletinTitleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinTitleResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_TaskBuletinReport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_TaskBuletinReport_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TaskBuletinReport(rctx, args["input"].(model.TaskBulletinReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskReportOutput)
	fc.Result = res
	return ec.marshalNTaskReportOutput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReportOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipients_id(ctx context.Context, field graphql.CollectedField, obj *model.Recipients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipients",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipients_description(ctx context.Context, field graphql.CollectedField, obj *model.Recipients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipients",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePictureZip_error(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePictureZip) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePictureZip",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePictureZip_message(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePictureZip) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePictureZip",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePictureZip_url(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePictureZip) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePictureZip",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePicturesResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePicturesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePicturesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePicturesResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePicturesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePicturesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RetrievePicturesResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.RetrievePicturesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RetrievePicturesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Teams)
	fc.Result = res
	return ec.marshalNTeams2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_teamMemberId(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_userId(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_firstName(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_lastName(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_activeDirectory(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveDirectory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_email(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_approvalRoleTitle(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalRoleTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_approvalRoleValues(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalRoleValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepData_customers(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerData)
	fc.Result = res
	return ec.marshalOCustomerData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerData(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_teamMemberId(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_userId(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_firstName(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_lastName(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_activeDirectory(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveDirectory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_email(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_approvalRoleTitle(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalRoleTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_approvalRoleValues(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalRoleValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesRepDataDropDown_customers(ctx context.Context, field graphql.CollectedField, obj *model.SalesRepDataDropDown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SalesRepDataDropDown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerDataDropDown)
	fc.Result = res
	return ec.marshalOCustomerDataDropDown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerDataDropDown(ctx, field.Selections, res)
}

func (ec *executionContext) _Target_month(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Target",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Target_value(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Target",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_customerTargetId(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerTargetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_type(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_category(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_productBrandId(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductBrandID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_productBrandName(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductBrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_year(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetCustomer_targets(ctx context.Context, field graphql.CollectedField, obj *model.TargetCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Targets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetValueRes_month(ctx context.Context, field graphql.CollectedField, obj *model.TargetValueRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetValueRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _TargetValueRes_value(ctx context.Context, field graphql.CollectedField, obj *model.TargetValueRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TargetValueRes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinResponse_dropDown(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DropDown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TeamMemberDropdown)
	fc.Result = res
	return ec.marshalNTeamMemberDropdown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamMemberDropdown(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinTitleResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinTitleResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinTitleResponse_typeDetails(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinTitleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinTitleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TitleValue)
	fc.Result = res
	return ec.marshalNtitleValue2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTitleValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinUpsertResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinUpsertResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskBulletinUpsertResponse_validationErrors(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskReportOutput_error(ctx context.Context, field graphql.CollectedField, obj *model.TaskReportOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskReportOutput",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskReportOutput_message(ctx context.Context, field graphql.CollectedField, obj *model.TaskReportOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskReportOutput",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskReportOutput_url(ctx context.Context, field graphql.CollectedField, obj *model.TaskReportOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskReportOutput",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TaskReportOutput_values(ctx context.Context, field graphql.CollectedField, obj *model.TaskReportOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TaskReportOutput",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TaskReport)
	fc.Result = res
	return ec.marshalOtaskReport2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReport(ctx, field.Selections, res)
}

func (ec *executionContext) _TeamMemberDropdown_teamId(ctx context.Context, field graphql.CollectedField, obj *model.TeamMemberDropdown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TeamMemberDropdown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TeamMemberDropdown_teamName(ctx context.Context, field graphql.CollectedField, obj *model.TeamMemberDropdown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TeamMemberDropdown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TeamMemberDropdown_employee(ctx context.Context, field graphql.CollectedField, obj *model.TeamMemberDropdown) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TeamMemberDropdown",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SalesRepDataDropDown)
	fc.Result = res
	return ec.marshalOSalesRepDataDropDown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataDropDown(ctx, field.Selections, res)
}

func (ec *executionContext) _Teams_teamID(ctx context.Context, field graphql.CollectedField, obj *model.Teams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Teams",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Teams_teamName(ctx context.Context, field graphql.CollectedField, obj *model.Teams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Teams",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Teams_customers(ctx context.Context, field graphql.CollectedField, obj *model.Teams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Teams",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _WeeklyFeedback_weekNumber(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WeeklyFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeeklyFeedback_weekDateValue(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WeeklyFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekDateValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeeklyFeedback_status(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WeeklyFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeeklyFeedback_remarks(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WeeklyFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeeklyFeedback_attachments(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WeeklyFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _customerFeedback_statusTitle(ctx context.Context, field graphql.CollectedField, obj *model.CustomerFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerFeedback_statusValue(ctx context.Context, field graphql.CollectedField, obj *model.CustomerFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerFeedback_remarks(ctx context.Context, field graphql.CollectedField, obj *model.CustomerFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerFeedback_dateCreated(ctx context.Context, field graphql.CollectedField, obj *model.CustomerFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerFeedback_attachments(ctx context.Context, field graphql.CollectedField, obj *model.CustomerFeedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerFeedback",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _customerResponse_custoMerId(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustoMerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerResponse_custoMerName(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustoMerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerResponse_soldTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoldTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _customerResponse_shipTo(ctx context.Context, field graphql.CollectedField, obj *model.CustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "customerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fetchCustomerFeedbackResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.FetchCustomerFeedbackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fetchCustomerFeedbackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _fetchCustomerFeedbackResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.FetchCustomerFeedbackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fetchCustomerFeedbackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _fetchCustomerFeedbackResponse_customerFeedback(ctx context.Context, field graphql.CollectedField, obj *model.FetchCustomerFeedbackResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "fetchCustomerFeedbackResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomerFeedback)
	fc.Result = res
	return ec.marshalNcustomerFeedback2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerFeedbackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_id(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_type(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_title(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_description(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_validityDate(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidityDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_attachments(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletin_recipients(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletin",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Recipients)
	fc.Result = res
	return ec.marshalNRecipients2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRecipientsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_id(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_title(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_description(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_status(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_startDate(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_endDate(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_type(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_createdDate(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_modifiedDate(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinData_attachments(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinResponse_validationErrors(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinUpsertResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinUpsertResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _flashBulletinUpsertResponse_validationErrors(ctx context.Context, field graphql.CollectedField, obj *model.FlashBulletinUpsertResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "flashBulletinUpsertResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _kpiResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.KpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "kpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _kpiResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.KpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "kpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _kpiResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.KpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "kpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _kpiResponse_validationErrors(ctx context.Context, field graphql.CollectedField, obj *model.KpiResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "kpiResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _listFlashBulletinResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ListFlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listFlashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _listFlashBulletinResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.ListFlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listFlashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _listFlashBulletinResponse_flashBulletins(ctx context.Context, field graphql.CollectedField, obj *model.ListFlashBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listFlashBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlashBulletins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FlashBulletinData)
	fc.Result = res
	return ec.marshalNflashBulletinData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _listTaskBulletinResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.ListTaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listTaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _listTaskBulletinResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.ListTaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listTaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _listTaskBulletinResponse_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.ListTaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listTaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _listTaskBulletinResponse_taskBulletins(ctx context.Context, field graphql.CollectedField, obj *model.ListTaskBulletinResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "listTaskBulletinResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskBulletins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaskBulletinData)
	fc.Result = res
	return ec.marshalNtaskBulletinData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _principalDropDownData_principalName(ctx context.Context, field graphql.CollectedField, obj *model.PrincipalDropDownData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "principalDropDownData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrincipalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _retriveInfoFlashBulletinleResponse_error(ctx context.Context, field graphql.CollectedField, obj *model.RetriveInfoFlashBulletinleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retriveInfoFlashBulletinleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _retriveInfoFlashBulletinleResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.RetriveInfoFlashBulletinleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retriveInfoFlashBulletinleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _retriveInfoFlashBulletinleResponse_flashBulletinData(ctx context.Context, field graphql.CollectedField, obj *model.RetriveInfoFlashBulletinleResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retriveInfoFlashBulletinleResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FlashBulletinData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FlashBulletin)
	fc.Result = res
	return ec.marshalOflashBulletin2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletin(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_id(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_creationDate(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_targetDate(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_typeTitle(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_typeValue(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_principalName(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrincipalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_teamId(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_teamName(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_title(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_description(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_salesRep(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesRep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SalesRepData)
	fc.Result = res
	return ec.marshalNSalesRepData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _taskBulletinData_attachments(ctx context.Context, field graphql.CollectedField, obj *model.TaskBulletinData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskBulletinData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_bulletinTitle(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulletinTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_bulletinType(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulletinType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_principalName(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrincipalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_customerName(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_teamName(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_userName(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_activeDirectory(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveDirectory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_creationDate(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_targetDate(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _taskReport_weeklyFeedback(ctx context.Context, field graphql.CollectedField, obj *model.TaskReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "taskReport",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeeklyFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WeeklyFeedback)
	fc.Result = res
	return ec.marshalOWeeklyFeedback2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐWeeklyFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) _titleValue_type(ctx context.Context, field graphql.CollectedField, obj *model.TitleValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "titleValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _validationMessage_row(ctx context.Context, field graphql.CollectedField, obj *model.ValidationMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationMessage",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Row, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _validationMessage_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.ValidationMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationMessage",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _validationMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.ValidationMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationMessage",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _validationResult_error(ctx context.Context, field graphql.CollectedField, obj *model.ValidationResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _validationResult_validationTimeTaken(ctx context.Context, field graphql.CollectedField, obj *model.ValidationResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationTimeTaken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _validationResult_validationMessage(ctx context.Context, field graphql.CollectedField, obj *model.ValidationResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "validationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ValidationMessage)
	fc.Result = res
	return ec.marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActionKPITargetInput(ctx context.Context, obj interface{}) (model.ActionKPITargetInput, error) {
	var it model.ActionKPITargetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("action"))
			it.Action, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorActiveDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authorActiveDirName"))
			it.AuthorActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttachmentUpsertInput(ctx context.Context, obj interface{}) (model.AttachmentUpsertInput, error) {
	var it model.AttachmentUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("filename"))
			it.Filename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerContactDeleteRequest(ctx context.Context, obj interface{}) (model.CustomerContactDeleteRequest, error) {
	var it model.CustomerContactDeleteRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorActiveDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authorActiveDirName"))
			it.AuthorActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerContactRequest(ctx context.Context, obj interface{}) (model.CustomerContactRequest, error) {
	var it model.CustomerContactRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("contactName"))
			it.ContactName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "designation":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("designation"))
			it.Designation, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactNumber":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("contactNumber"))
			it.ContactNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contactImage":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("contactImage"))
			it.ContactImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorActiveDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authorActiveDirName"))
			it.AuthorActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerId"))
			it.CustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("emailId"))
			it.EmailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerGroupInput(ctx context.Context, obj interface{}) (model.CustomerGroupInput, error) {
	var it model.CustomerGroupInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamId"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerGroup":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerGroup"))
			it.CustomerGroup, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerTargetInput(ctx context.Context, obj interface{}) (model.CustomerTargetInput, error) {
	var it model.CustomerTargetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "productBrandId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productBrandId"))
			it.ProductBrandID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("year"))
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "answers":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("answers"))
			it.Answers, err = ec.unmarshalNTargetValues2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValuesᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerTaskFeedBackInput(ctx context.Context, obj interface{}) (model.CustomerTaskFeedBackInput, error) {
	var it model.CustomerTaskFeedBackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "taskBulletinId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskBulletinId"))
			it.TaskBulletinID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attachments"))
			it.Attachments, err = ec.unmarshalOattachments2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachments(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBrandProductRequest(ctx context.Context, obj interface{}) (model.GetBrandProductRequest, error) {
	var it model.GetBrandProductRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "targetTeam":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetTeam"))
			it.TargetTeam, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brandId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("brandId"))
			it.BrandID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamProductId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamProductId"))
			it.TeamProductID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productId"))
			it.ProductID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPriority":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isPriority"))
			it.IsPriority, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchItem":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchItem"))
			it.SearchItem, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isKpi":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isKpi"))
			it.IsKpi, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetCustomerContactRequest(ctx context.Context, obj interface{}) (model.GetCustomerContactRequest, error) {
	var it model.GetCustomerContactRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerId"))
			it.CustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMememberCustomerID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMememberCustomerID"))
			it.TeamMememberCustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetKpiAnswerRequest(ctx context.Context, obj interface{}) (model.GetKpiAnswerRequest, error) {
	var it model.GetKpiAnswerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kpiId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiId"))
			it.KpiID, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kpiVersionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiVersionId"))
			it.KpiVersionID, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalNInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scheduleEvent":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scheduleEvent"))
			it.ScheduleEvent, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetItem":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetItem"))
			it.TargetItem, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetKpiTargetRequest(ctx context.Context, obj interface{}) (model.GetKpiTargetRequest, error) {
	var it model.GetKpiTargetRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesRepId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("salesRepId"))
			it.SalesRepID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamId"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetTargetCustomerRequest(ctx context.Context, obj interface{}) (model.GetTargetCustomerRequest, error) {
	var it model.GetTargetCustomerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isExcel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isExcel"))
			it.IsExcel, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productBrandId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productBrandId"))
			it.ProductBrandID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productBrandName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productBrandName"))
			it.ProductBrandName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageNo":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageNo"))
			it.PageNo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPI(ctx context.Context, obj interface{}) (model.KPI, error) {
	var it model.KPI
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("active"))
			it.Active, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveStartDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveStartDate"))
			it.EffectiveStartDate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveEndDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveEndDate"))
			it.EffectiveEndDate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("questions"))
			it.Questions, err = ec.unmarshalNKPIQuestion2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPIAnswerStruct(ctx context.Context, obj interface{}) (model.KPIAnswerStruct, error) {
	var it model.KPIAnswerStruct
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "questioNnumber":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("questioNnumber"))
			it.QuestioNnumber, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPIDesign(ctx context.Context, obj interface{}) (model.KPIDesign, error) {
	var it model.KPIDesign
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveStartDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveStartDate"))
			it.EffectiveStartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveEndDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveEndDate"))
			it.EffectiveEndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("questions"))
			it.Questions, err = ec.unmarshalNKPIQuestion2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPIQuestion(ctx context.Context, obj interface{}) (model.KPIQuestion, error) {
	var it model.KPIQuestion
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "questionNumber":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("questionNumber"))
			it.QuestionNumber, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "optionValues":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("optionValues"))
			it.OptionValues, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "required":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("required"))
			it.Required, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPITargetInput(ctx context.Context, obj interface{}) (model.KPITargetInput, error) {
	var it model.KPITargetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesRepId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("salesRepId"))
			it.SalesRepID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamId"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("year"))
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "target":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("target"))
			it.Target, err = ec.unmarshalNKPITargets2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargetsᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorActiveDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authorActiveDirName"))
			it.AuthorActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKPITargets(ctx context.Context, obj interface{}) (model.KPITargets, error) {
	var it model.KPITargets
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kpiTitle":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiTitle"))
			it.KpiTitle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("values"))
			it.Values, err = ec.unmarshalNTargetValues2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValuesᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKpiAnswerRequest(ctx context.Context, obj interface{}) (model.KpiAnswerRequest, error) {
	var it model.KpiAnswerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kpiVersionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiVersionId"))
			it.KpiVersionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("category"))
			it.Category, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "answers":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("answers"))
			it.Answers, err = ec.unmarshalNKPIAnswerStruct2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerStructᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorActiveDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("authorActiveDirName"))
			it.AuthorActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetItem":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetItem"))
			it.TargetItem, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "scheduleEvent":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("scheduleEvent"))
			it.ScheduleEvent, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKpiOfflineInput(ctx context.Context, obj interface{}) (model.KpiOfflineInput, error) {
	var it model.KpiOfflineInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "startDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startDate"))
			it.StartDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endDate"))
			it.EndDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListInput(ctx context.Context, obj interface{}) (model.ListInput, error) {
	var it model.ListInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamID"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPictureZipInput(ctx context.Context, obj interface{}) (model.PictureZipInput, error) {
	var it model.PictureZipInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "selections":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("selections"))
			it.Selections, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPicturesInput(ctx context.Context, obj interface{}) (model.PicturesInput, error) {
	var it model.PicturesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamID"))
			it.TeamID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "productID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productID"))
			it.ProductID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brandID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("brandID"))
			it.BrandID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerID"))
			it.CustomerID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startDate"))
			it.StartDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endDate"))
			it.EndDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPrincipalDropDownInput(ctx context.Context, obj interface{}) (model.PrincipalDropDownInput, error) {
	var it model.PrincipalDropDownInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamID"))
			it.TeamID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTargetValues(ctx context.Context, obj interface{}) (model.TargetValues, error) {
	var it model.TargetValues
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "month":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("month"))
			it.Month, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskBulletinInput(ctx context.Context, obj interface{}) (model.TaskBulletinInput, error) {
	var it model.TaskBulletinInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamID"))
			it.TeamID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberId"))
			it.TeamMemberID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerID"))
			it.CustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "onlySalesrep":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("onlySalesrep"))
			it.OnlySalesrep, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskBulletinReportInput(ctx context.Context, obj interface{}) (model.TaskBulletinReportInput, error) {
	var it model.TaskBulletinReportInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isExcel":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isExcel"))
			it.IsExcel, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tittle":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("tittle"))
			it.Tittle, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateRange":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("dateRange"))
			it.DateRange, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskBulletinTitleInput(ctx context.Context, obj interface{}) (model.TaskBulletinTitleInput, error) {
	var it model.TaskBulletinTitleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamID"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskBulletinUpsertInput(ctx context.Context, obj interface{}) (model.TaskBulletinUpsertInput, error) {
	var it model.TaskBulletinUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "creationDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creationDate"))
			it.CreationDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetDate"))
			it.TargetDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomer":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomer"))
			it.TeamMemberCustomer, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "principalName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("principalName"))
			it.PrincipalName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attachments"))
			it.Attachments, err = ec.unmarshalOattachments2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachments(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertKpiRequest(ctx context.Context, obj interface{}) (model.UpsertKpiRequest, error) {
	var it model.UpsertKpiRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetTeam":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetTeam"))
			it.TargetTeam, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetProducts":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetProducts"))
			it.TargetProducts, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetBrand":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetBrand"))
			it.TargetBrand, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveMonth":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveMonth"))
			it.EffectiveMonth, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "effectiveYear":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("effectiveYear"))
			it.EffectiveYear, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPriority":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isPriority"))
			it.IsPriority, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "brandDesign":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("brandDesign"))
			it.BrandDesign, err = ec.unmarshalNKPI2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "productDesign":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("productDesign"))
			it.ProductDesign, err = ec.unmarshalNKPI2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputattachments(ctx context.Context, obj interface{}) (model.Attachments, error) {
	var it model.Attachments
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("filename"))
			it.Filename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputfetchCustomerFeedbackInput(ctx context.Context, obj interface{}) (model.FetchCustomerFeedbackInput, error) {
	var it model.FetchCustomerFeedbackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskBulletinId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taskBulletinId"))
			it.TaskBulletinID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputflashBulletinUpsertInput(ctx context.Context, obj interface{}) (model.FlashBulletinUpsertInput, error) {
	var it model.FlashBulletinUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "activeDirName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("activeDirName"))
			it.ActiveDirName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "validity_date_start":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("validity_date_start"))
			it.ValidityDateStart, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "validity_date_end":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("validity_date_end"))
			it.ValidityDateEnd, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("attachments"))
			it.Attachments, err = ec.unmarshalNAttachmentUpsertInput2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentUpsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipients":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("recipients"))
			it.Recipients, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDeleted":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isDeleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerGroup":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("customerGroup"))
			it.CustomerGroup, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetKpiInput(ctx context.Context, obj interface{}) (model.GetKpiInput, error) {
	var it model.GetKpiInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "parentKpiId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("parentKpiId"))
			it.ParentKpiID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kpiId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiId"))
			it.KpiID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kpiVersionId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("kpiVersionId"))
			it.KpiVersionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamId"))
			it.TeamID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brandId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("brandId"))
			it.BrandID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamProductId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamProductId"))
			it.TeamProductID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchItem":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchItem"))
			it.SearchItem, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageNo":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageNo"))
			it.PageNo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlistFlashBulletinInput(ctx context.Context, obj interface{}) (model.ListFlashBulletinInput, error) {
	var it model.ListFlashBulletinInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("startDate"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("endDate"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "receipientId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("receipientId"))
			it.ReceipientID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlistTaskBulletinInput(ctx context.Context, obj interface{}) (model.ListTaskBulletinInput, error) {
	var it model.ListTaskBulletinInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "creationDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("creationDate"))
			it.CreationDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetDate":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("targetDate"))
			it.TargetDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberId"))
			it.TeamMemberID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamMemberCustomerId":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("teamMemberCustomerId"))
			it.TeamMemberCustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageNo":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageNo"))
			it.PageNo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchItem":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchItem"))
			it.SearchItem, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputretriveInfoFlashBulletinInput(ctx context.Context, obj interface{}) (model.RetriveInfoFlashBulletinInput, error) {
	var it model.RetriveInfoFlashBulletinInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bulletinID":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("bulletinID"))
			it.BulletinID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *model.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			out.Values[i] = ec._Attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Attachment_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filename":
			out.Values[i] = ec._Attachment_filename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var brandListImplementors = []string{"BrandList"}

func (ec *executionContext) _BrandList(ctx context.Context, sel ast.SelectionSet, obj *model.BrandList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brandListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrandList")
		case "id":
			out.Values[i] = ec._BrandList_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._BrandList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var brandListResponseImplementors = []string{"BrandListResponse"}

func (ec *executionContext) _BrandListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.BrandListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, brandListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BrandListResponse")
		case "error":
			out.Values[i] = ec._BrandListResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._BrandListResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._BrandListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerImplementors = []string{"Customer"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *model.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "customerID":
			out.Values[i] = ec._Customer_customerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promotion":
			out.Values[i] = ec._Customer_promotion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerName":
			out.Values[i] = ec._Customer_customerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "product":
			out.Values[i] = ec._Customer_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "survey":
			out.Values[i] = ec._Customer_survey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brand":
			out.Values[i] = ec._Customer_brand(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "competitor":
			out.Values[i] = ec._Customer_competitor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerContactImplementors = []string{"CustomerContact"}

func (ec *executionContext) _CustomerContact(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerContactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerContact")
		case "id":
			out.Values[i] = ec._CustomerContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contactName":
			out.Values[i] = ec._CustomerContact_contactName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "designation":
			out.Values[i] = ec._CustomerContact_designation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contactNumber":
			out.Values[i] = ec._CustomerContact_contactNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contactImage":
			out.Values[i] = ec._CustomerContact_contactImage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerId":
			out.Values[i] = ec._CustomerContact_customerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerName":
			out.Values[i] = ec._CustomerContact_customerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasConsent":
			out.Values[i] = ec._CustomerContact_hasConsent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emailId":
			out.Values[i] = ec._CustomerContact_emailId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerDataImplementors = []string{"CustomerData"}

func (ec *executionContext) _CustomerData(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerData")
		case "customerID":
			out.Values[i] = ec._CustomerData_customerID(ctx, field, obj)
		case "teamMemberCustomerId":
			out.Values[i] = ec._CustomerData_teamMemberCustomerId(ctx, field, obj)
		case "customerName":
			out.Values[i] = ec._CustomerData_customerName(ctx, field, obj)
		case "soldTo":
			out.Values[i] = ec._CustomerData_soldTo(ctx, field, obj)
		case "shipTo":
			out.Values[i] = ec._CustomerData_shipTo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerDataDropDownImplementors = []string{"CustomerDataDropDown"}

func (ec *executionContext) _CustomerDataDropDown(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerDataDropDown) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerDataDropDownImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerDataDropDown")
		case "customerID":
			out.Values[i] = ec._CustomerDataDropDown_customerID(ctx, field, obj)
		case "teamMemberCustomerId":
			out.Values[i] = ec._CustomerDataDropDown_teamMemberCustomerId(ctx, field, obj)
		case "customerName":
			out.Values[i] = ec._CustomerDataDropDown_customerName(ctx, field, obj)
		case "soldTo":
			out.Values[i] = ec._CustomerDataDropDown_soldTo(ctx, field, obj)
		case "shipTo":
			out.Values[i] = ec._CustomerDataDropDown_shipTo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerGroupImplementors = []string{"CustomerGroup"}

func (ec *executionContext) _CustomerGroup(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerGroup")
		case "inDusTrialCode":
			out.Values[i] = ec._CustomerGroup_inDusTrialCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customeDetails":
			out.Values[i] = ec._CustomerGroup_customeDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerGroupResponseImplementors = []string{"CustomerGroupResponse"}

func (ec *executionContext) _CustomerGroupResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerGroupResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerGroupResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerGroupResponse")
		case "error":
			out.Values[i] = ec._CustomerGroupResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._CustomerGroupResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "custoMerData":
			out.Values[i] = ec._CustomerGroupResponse_custoMerData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerListImplementors = []string{"CustomerList"}

func (ec *executionContext) _CustomerList(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerList")
		case "id":
			out.Values[i] = ec._CustomerList_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._CustomerList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerListResponseImplementors = []string{"CustomerListResponse"}

func (ec *executionContext) _CustomerListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerListResponse")
		case "error":
			out.Values[i] = ec._CustomerListResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._CustomerListResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._CustomerListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerTaskFeedBackResponseImplementors = []string{"CustomerTaskFeedBackResponse"}

func (ec *executionContext) _CustomerTaskFeedBackResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerTaskFeedBackResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerTaskFeedBackResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerTaskFeedBackResponse")
		case "error":
			out.Values[i] = ec._CustomerTaskFeedBackResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._CustomerTaskFeedBackResponse_message(ctx, field, obj)
		case "validationErrors":
			out.Values[i] = ec._CustomerTaskFeedBackResponse_validationErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getCustomerContactResponseImplementors = []string{"GetCustomerContactResponse"}

func (ec *executionContext) _GetCustomerContactResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetCustomerContactResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCustomerContactResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCustomerContactResponse")
		case "getCustomerContact":
			out.Values[i] = ec._GetCustomerContactResponse_getCustomerContact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiImplementors = []string{"GetKpi"}

func (ec *executionContext) _GetKpi(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpi) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpi")
		case "parentKpiId":
			out.Values[i] = ec._GetKpi_parentKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productKpiId":
			out.Values[i] = ec._GetKpi_productKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandKpiId":
			out.Values[i] = ec._GetKpi_brandKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productKpiVersionId":
			out.Values[i] = ec._GetKpi_productKpiVersionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandKpiVersionId":
			out.Values[i] = ec._GetKpi_brandKpiVersionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiName":
			out.Values[i] = ec._GetKpi_kpiName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetTeamId":
			out.Values[i] = ec._GetKpi_targetTeamId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetTeamName":
			out.Values[i] = ec._GetKpi_targetTeamName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveMonth":
			out.Values[i] = ec._GetKpi_effectiveMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveYear":
			out.Values[i] = ec._GetKpi_effectiveYear(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPriority":
			out.Values[i] = ec._GetKpi_isPriority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetProduct":
			out.Values[i] = ec._GetKpi_targetProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetBrand":
			out.Values[i] = ec._GetKpi_targetBrand(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productDesign":
			out.Values[i] = ec._GetKpi_productDesign(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandDesign":
			out.Values[i] = ec._GetKpi_brandDesign(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiAnswerResponseImplementors = []string{"GetKpiAnswerResponse"}

func (ec *executionContext) _GetKpiAnswerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpiAnswerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiAnswerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpiAnswerResponse")
		case "error":
			out.Values[i] = ec._GetKpiAnswerResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._GetKpiAnswerResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._GetKpiAnswerResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isOldAnswer":
			out.Values[i] = ec._GetKpiAnswerResponse_isOldAnswer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isProposedStock":
			out.Values[i] = ec._GetKpiAnswerResponse_isProposedStock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getAnswers":
			out.Values[i] = ec._GetKpiAnswerResponse_getAnswers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiBrandProductResponseImplementors = []string{"GetKpiBrandProductResponse"}

func (ec *executionContext) _GetKpiBrandProductResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpiBrandProductResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiBrandProductResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpiBrandProductResponse")
		case "error":
			out.Values[i] = ec._GetKpiBrandProductResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._GetKpiBrandProductResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._GetKpiBrandProductResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brands":
			out.Values[i] = ec._GetKpiBrandProductResponse_brands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiOfflineImplementors = []string{"GetKpiOffline"}

func (ec *executionContext) _GetKpiOffline(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpiOffline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiOfflineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpiOffline")
		case "parentKpiId":
			out.Values[i] = ec._GetKpiOffline_parentKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productKpiId":
			out.Values[i] = ec._GetKpiOffline_productKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandKpiId":
			out.Values[i] = ec._GetKpiOffline_brandKpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productKpiVersionId":
			out.Values[i] = ec._GetKpiOffline_productKpiVersionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandKpiVersionId":
			out.Values[i] = ec._GetKpiOffline_brandKpiVersionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiName":
			out.Values[i] = ec._GetKpiOffline_kpiName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetTeamId":
			out.Values[i] = ec._GetKpiOffline_targetTeamId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetTeamName":
			out.Values[i] = ec._GetKpiOffline_targetTeamName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveMonth":
			out.Values[i] = ec._GetKpiOffline_effectiveMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveYear":
			out.Values[i] = ec._GetKpiOffline_effectiveYear(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPriority":
			out.Values[i] = ec._GetKpiOffline_isPriority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetProduct":
			out.Values[i] = ec._GetKpiOffline_targetProduct(ctx, field, obj)
		case "targetBrand":
			out.Values[i] = ec._GetKpiOffline_targetBrand(ctx, field, obj)
		case "productDesign":
			out.Values[i] = ec._GetKpiOffline_productDesign(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandDesign":
			out.Values[i] = ec._GetKpiOffline_brandDesign(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiResponseImplementors = []string{"GetKpiResponse"}

func (ec *executionContext) _GetKpiResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpiResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpiResponse")
		case "error":
			out.Values[i] = ec._GetKpiResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._GetKpiResponse_message(ctx, field, obj)
		case "errorCode":
			out.Values[i] = ec._GetKpiResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalPage":
			out.Values[i] = ec._GetKpiResponse_totalPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetKpiResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getKpiTargetResponseImplementors = []string{"GetKpiTargetResponse"}

func (ec *executionContext) _GetKpiTargetResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetKpiTargetResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getKpiTargetResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetKpiTargetResponse")
		case "error":
			out.Values[i] = ec._GetKpiTargetResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._GetKpiTargetResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getTargets":
			out.Values[i] = ec._GetKpiTargetResponse_getTargets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getTargetCustomerResponseImplementors = []string{"GetTargetCustomerResponse"}

func (ec *executionContext) _GetTargetCustomerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetTargetCustomerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getTargetCustomerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetTargetCustomerResponse")
		case "url":
			out.Values[i] = ec._GetTargetCustomerResponse_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":
			out.Values[i] = ec._GetTargetCustomerResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._GetTargetCustomerResponse_message(ctx, field, obj)
		case "totalPage":
			out.Values[i] = ec._GetTargetCustomerResponse_totalPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetTargetCustomerResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagesImplementors = []string{"Images"}

func (ec *executionContext) _Images(ctx context.Context, sel ast.SelectionSet, obj *model.Images) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Images")
		case "name":
			out.Values[i] = ec._Images_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Images_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kPIAnswerResImplementors = []string{"KPIAnswerRes"}

func (ec *executionContext) _KPIAnswerRes(ctx context.Context, sel ast.SelectionSet, obj *model.KPIAnswerRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kPIAnswerResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KPIAnswerRes")
		case "questioNnumber":
			out.Values[i] = ec._KPIAnswerRes_questioNnumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._KPIAnswerRes_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kPIDesignResImplementors = []string{"KPIDesignRes"}

func (ec *executionContext) _KPIDesignRes(ctx context.Context, sel ast.SelectionSet, obj *model.KPIDesignRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kPIDesignResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KPIDesignRes")
		case "name":
			out.Values[i] = ec._KPIDesignRes_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._KPIDesignRes_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoryId":
			out.Values[i] = ec._KPIDesignRes_categoryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._KPIDesignRes_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._KPIDesignRes_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveStartDate":
			out.Values[i] = ec._KPIDesignRes_effectiveStartDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "effectiveEndDate":
			out.Values[i] = ec._KPIDesignRes_effectiveEndDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questions":
			out.Values[i] = ec._KPIDesignRes_questions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kPIQuestionResImplementors = []string{"KPIQuestionRes"}

func (ec *executionContext) _KPIQuestionRes(ctx context.Context, sel ast.SelectionSet, obj *model.KPIQuestionRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kPIQuestionResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KPIQuestionRes")
		case "questionNumber":
			out.Values[i] = ec._KPIQuestionRes_questionNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._KPIQuestionRes_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._KPIQuestionRes_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "optionValues":
			out.Values[i] = ec._KPIQuestionRes_optionValues(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._KPIQuestionRes_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "required":
			out.Values[i] = ec._KPIQuestionRes_required(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiAnswerImplementors = []string{"KpiAnswer"}

func (ec *executionContext) _KpiAnswer(ctx context.Context, sel ast.SelectionSet, obj *model.KpiAnswer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiAnswerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiAnswer")
		case "id":
			out.Values[i] = ec._KpiAnswer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "answer":
			out.Values[i] = ec._KpiAnswer_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiId":
			out.Values[i] = ec._KpiAnswer_kpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiVersionId":
			out.Values[i] = ec._KpiAnswer_kpiVersionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._KpiAnswer_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamMemberCustomerId":
			out.Values[i] = ec._KpiAnswer_teamMemberCustomerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scheduleEvent":
			out.Values[i] = ec._KpiAnswer_scheduleEvent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetItem":
			out.Values[i] = ec._KpiAnswer_targetItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiBrandItemImplementors = []string{"KpiBrandItem"}

func (ec *executionContext) _KpiBrandItem(ctx context.Context, sel ast.SelectionSet, obj *model.KpiBrandItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiBrandItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiBrandItem")
		case "brandId":
			out.Values[i] = ec._KpiBrandItem_brandId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandName":
			out.Values[i] = ec._KpiBrandItem_brandName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "products":
			out.Values[i] = ec._KpiBrandItem_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiBrandItemOfflineImplementors = []string{"KpiBrandItemOffline"}

func (ec *executionContext) _KpiBrandItemOffline(ctx context.Context, sel ast.SelectionSet, obj *model.KpiBrandItemOffline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiBrandItemOfflineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiBrandItemOffline")
		case "brandId":
			out.Values[i] = ec._KpiBrandItemOffline_brandId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandName":
			out.Values[i] = ec._KpiBrandItemOffline_brandName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandKpiVersionId":
			out.Values[i] = ec._KpiBrandItemOffline_brandKpiVersionId(ctx, field, obj)
		case "brandKpiAnswer":
			out.Values[i] = ec._KpiBrandItemOffline_brandKpiAnswer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "products":
			out.Values[i] = ec._KpiBrandItemOffline_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiOfflineResponseImplementors = []string{"KpiOfflineResponse"}

func (ec *executionContext) _KpiOfflineResponse(ctx context.Context, sel ast.SelectionSet, obj *model.KpiOfflineResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiOfflineResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiOfflineResponse")
		case "error":
			out.Values[i] = ec._KpiOfflineResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._KpiOfflineResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._KpiOfflineResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getKpiOffline":
			out.Values[i] = ec._KpiOfflineResponse_getKpiOffline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiProductBrandAnswer":
			out.Values[i] = ec._KpiOfflineResponse_kpiProductBrandAnswer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiProductBrandAnswerImplementors = []string{"KpiProductBrandAnswer"}

func (ec *executionContext) _KpiProductBrandAnswer(ctx context.Context, sel ast.SelectionSet, obj *model.KpiProductBrandAnswer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiProductBrandAnswerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiProductBrandAnswer")
		case "eventID":
			out.Values[i] = ec._KpiProductBrandAnswer_eventID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamCustomerID":
			out.Values[i] = ec._KpiProductBrandAnswer_teamCustomerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brands":
			out.Values[i] = ec._KpiProductBrandAnswer_brands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiProductItemImplementors = []string{"KpiProductItem"}

func (ec *executionContext) _KpiProductItem(ctx context.Context, sel ast.SelectionSet, obj *model.KpiProductItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiProductItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiProductItem")
		case "teamProductId":
			out.Values[i] = ec._KpiProductItem_teamProductId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productId":
			out.Values[i] = ec._KpiProductItem_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "principalName":
			out.Values[i] = ec._KpiProductItem_principalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "materialDescription":
			out.Values[i] = ec._KpiProductItem_materialDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPriority":
			out.Values[i] = ec._KpiProductItem_isPriority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiProductItemOfflineImplementors = []string{"KpiProductItemOffline"}

func (ec *executionContext) _KpiProductItemOffline(ctx context.Context, sel ast.SelectionSet, obj *model.KpiProductItemOffline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiProductItemOfflineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiProductItemOffline")
		case "teamId":
			out.Values[i] = ec._KpiProductItemOffline_teamId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamProductId":
			out.Values[i] = ec._KpiProductItemOffline_teamProductId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productId":
			out.Values[i] = ec._KpiProductItemOffline_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "principalName":
			out.Values[i] = ec._KpiProductItemOffline_principalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "materialDescription":
			out.Values[i] = ec._KpiProductItemOffline_materialDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPriority":
			out.Values[i] = ec._KpiProductItemOffline_isPriority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productKpiVersionId":
			out.Values[i] = ec._KpiProductItemOffline_productKpiVersionId(ctx, field, obj)
		case "productKpiAnswer":
			out.Values[i] = ec._KpiProductItemOffline_productKpiAnswer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiTaregetTitleResponseImplementors = []string{"KpiTaregetTitleResponse"}

func (ec *executionContext) _KpiTaregetTitleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.KpiTaregetTitleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiTaregetTitleResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiTaregetTitleResponse")
		case "error":
			out.Values[i] = ec._KpiTaregetTitleResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._KpiTaregetTitleResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiTargetTitles":
			out.Values[i] = ec._KpiTaregetTitleResponse_kpiTargetTitles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiTargetImplementors = []string{"KpiTarget"}

func (ec *executionContext) _KpiTarget(ctx context.Context, sel ast.SelectionSet, obj *model.KpiTarget) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiTargetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiTarget")
		case "id":
			out.Values[i] = ec._KpiTarget_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "year":
			out.Values[i] = ec._KpiTarget_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region":
			out.Values[i] = ec._KpiTarget_region(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._KpiTarget_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":
			out.Values[i] = ec._KpiTarget_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "plants":
			out.Values[i] = ec._KpiTarget_plants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bergu":
			out.Values[i] = ec._KpiTarget_bergu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._KpiTarget_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamName":
			out.Values[i] = ec._KpiTarget_teamName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salesRep":
			out.Values[i] = ec._KpiTarget_salesRep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "target":
			out.Values[i] = ec._KpiTarget_target(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiTargetResImplementors = []string{"KpiTargetRes"}

func (ec *executionContext) _KpiTargetRes(ctx context.Context, sel ast.SelectionSet, obj *model.KpiTargetRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiTargetResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiTargetRes")
		case "kpiTitle":
			out.Values[i] = ec._KpiTargetRes_kpiTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kpiValue":
			out.Values[i] = ec._KpiTargetRes_kpiValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._KpiTargetRes_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiTargetTitleImplementors = []string{"KpiTargetTitle"}

func (ec *executionContext) _KpiTargetTitle(ctx context.Context, sel ast.SelectionSet, obj *model.KpiTargetTitle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiTargetTitleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KpiTargetTitle")
		case "title":
			out.Values[i] = ec._KpiTargetTitle_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._KpiTargetTitle_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._KpiTargetTitle_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "saveCustomerTarget":
			out.Values[i] = ec._Mutation_saveCustomerTarget(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertFlashBulletin":
			out.Values[i] = ec._Mutation_upsertFlashBulletin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertCustomerContact":
			out.Values[i] = ec._Mutation_upsertCustomerContact(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCustomerContact":
			out.Values[i] = ec._Mutation_deleteCustomerContact(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveKpi":
			out.Values[i] = ec._Mutation_saveKpi(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveKpiAnswers":
			out.Values[i] = ec._Mutation_saveKpiAnswers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertKpiTarget":
			out.Values[i] = ec._Mutation_upsertKpiTarget(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actionKpiTarget":
			out.Values[i] = ec._Mutation_actionKpiTarget(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertTaskBulletin":
			out.Values[i] = ec._Mutation_upsertTaskBulletin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "insertCustomerTaskFeedBack":
			out.Values[i] = ec._Mutation_insertCustomerTaskFeedBack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var principalDropDownResponseImplementors = []string{"PrincipalDropDownResponse"}

func (ec *executionContext) _PrincipalDropDownResponse(ctx context.Context, sel ast.SelectionSet, obj *model.PrincipalDropDownResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, principalDropDownResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrincipalDropDownResponse")
		case "error":
			out.Values[i] = ec._PrincipalDropDownResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._PrincipalDropDownResponse_message(ctx, field, obj)
		case "data":
			out.Values[i] = ec._PrincipalDropDownResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListImplementors = []string{"ProductList"}

func (ec *executionContext) _ProductList(ctx context.Context, sel ast.SelectionSet, obj *model.ProductList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductList")
		case "id":
			out.Values[i] = ec._ProductList_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ProductList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productListResponseImplementors = []string{"ProductListResponse"}

func (ec *executionContext) _ProductListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ProductListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductListResponse")
		case "error":
			out.Values[i] = ec._ProductListResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._ProductListResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._ProductListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "todos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_todos(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getTargetCustomer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTargetCustomer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCustomerGroup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCustomerGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getGetCustomerContacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGetCustomerContacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpiBrandProduct":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpiBrandProduct(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpis":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpis(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpiQuestionAnswerOffline":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpiQuestionAnswerOffline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpiAnswers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpiAnswers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpiTargets":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpiTargets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getKpiTargetTitle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKpiTargetTitle(ctx, field)
				return res
			})
		case "retriveFlashBulletinSingle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retriveFlashBulletinSingle(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listFlashbulletin":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFlashbulletin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrievePictures":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePictures(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrievePictureZip":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePictureZip(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrievePictureCustomerList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePictureCustomerList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrievePictureProductList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePictureProductList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrievePictureBrandList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrievePictureBrandList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listTaskBulletin":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listTaskBulletin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchCustomerFeedback":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchCustomerFeedback(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "teamToCustomerDropDown":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_teamToCustomerDropDown(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "principalDropDown":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_principalDropDown(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "taskBulletinTitleDropDown":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_taskBulletinTitleDropDown(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "TaskBuletinReport":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_TaskBuletinReport(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipientsImplementors = []string{"Recipients"}

func (ec *executionContext) _Recipients(ctx context.Context, sel ast.SelectionSet, obj *model.Recipients) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipientsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Recipients")
		case "id":
			out.Values[i] = ec._Recipients_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Recipients_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var retrievePictureZipImplementors = []string{"RetrievePictureZip"}

func (ec *executionContext) _RetrievePictureZip(ctx context.Context, sel ast.SelectionSet, obj *model.RetrievePictureZip) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, retrievePictureZipImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RetrievePictureZip")
		case "error":
			out.Values[i] = ec._RetrievePictureZip_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._RetrievePictureZip_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._RetrievePictureZip_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var retrievePicturesResponseImplementors = []string{"RetrievePicturesResponse"}

func (ec *executionContext) _RetrievePicturesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RetrievePicturesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, retrievePicturesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RetrievePicturesResponse")
		case "error":
			out.Values[i] = ec._RetrievePicturesResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._RetrievePicturesResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._RetrievePicturesResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var salesRepDataImplementors = []string{"SalesRepData"}

func (ec *executionContext) _SalesRepData(ctx context.Context, sel ast.SelectionSet, obj *model.SalesRepData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, salesRepDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SalesRepData")
		case "teamMemberId":
			out.Values[i] = ec._SalesRepData_teamMemberId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._SalesRepData_userId(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._SalesRepData_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._SalesRepData_lastName(ctx, field, obj)
		case "activeDirectory":
			out.Values[i] = ec._SalesRepData_activeDirectory(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SalesRepData_email(ctx, field, obj)
		case "approvalRoleTitle":
			out.Values[i] = ec._SalesRepData_approvalRoleTitle(ctx, field, obj)
		case "approvalRoleValues":
			out.Values[i] = ec._SalesRepData_approvalRoleValues(ctx, field, obj)
		case "customers":
			out.Values[i] = ec._SalesRepData_customers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var salesRepDataDropDownImplementors = []string{"SalesRepDataDropDown"}

func (ec *executionContext) _SalesRepDataDropDown(ctx context.Context, sel ast.SelectionSet, obj *model.SalesRepDataDropDown) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, salesRepDataDropDownImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SalesRepDataDropDown")
		case "teamMemberId":
			out.Values[i] = ec._SalesRepDataDropDown_teamMemberId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._SalesRepDataDropDown_userId(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._SalesRepDataDropDown_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._SalesRepDataDropDown_lastName(ctx, field, obj)
		case "activeDirectory":
			out.Values[i] = ec._SalesRepDataDropDown_activeDirectory(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SalesRepDataDropDown_email(ctx, field, obj)
		case "approvalRoleTitle":
			out.Values[i] = ec._SalesRepDataDropDown_approvalRoleTitle(ctx, field, obj)
		case "approvalRoleValues":
			out.Values[i] = ec._SalesRepDataDropDown_approvalRoleValues(ctx, field, obj)
		case "customers":
			out.Values[i] = ec._SalesRepDataDropDown_customers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var targetImplementors = []string{"Target"}

func (ec *executionContext) _Target(ctx context.Context, sel ast.SelectionSet, obj *model.Target) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Target")
		case "month":
			out.Values[i] = ec._Target_month(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Target_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var targetCustomerImplementors = []string{"TargetCustomer"}

func (ec *executionContext) _TargetCustomer(ctx context.Context, sel ast.SelectionSet, obj *model.TargetCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetCustomer")
		case "customerTargetId":
			out.Values[i] = ec._TargetCustomer_customerTargetId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._TargetCustomer_type(ctx, field, obj)
		case "category":
			out.Values[i] = ec._TargetCustomer_category(ctx, field, obj)
		case "productBrandId":
			out.Values[i] = ec._TargetCustomer_productBrandId(ctx, field, obj)
		case "productBrandName":
			out.Values[i] = ec._TargetCustomer_productBrandName(ctx, field, obj)
		case "year":
			out.Values[i] = ec._TargetCustomer_year(ctx, field, obj)
		case "targets":
			out.Values[i] = ec._TargetCustomer_targets(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var targetValueResImplementors = []string{"TargetValueRes"}

func (ec *executionContext) _TargetValueRes(ctx context.Context, sel ast.SelectionSet, obj *model.TargetValueRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetValueResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetValueRes")
		case "month":
			out.Values[i] = ec._TargetValueRes_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._TargetValueRes_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskBulletinResponseImplementors = []string{"TaskBulletinResponse"}

func (ec *executionContext) _TaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TaskBulletinResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskBulletinResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskBulletinResponse")
		case "error":
			out.Values[i] = ec._TaskBulletinResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._TaskBulletinResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dropDown":
			out.Values[i] = ec._TaskBulletinResponse_dropDown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskBulletinTitleResponseImplementors = []string{"TaskBulletinTitleResponse"}

func (ec *executionContext) _TaskBulletinTitleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TaskBulletinTitleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskBulletinTitleResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskBulletinTitleResponse")
		case "error":
			out.Values[i] = ec._TaskBulletinTitleResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._TaskBulletinTitleResponse_message(ctx, field, obj)
		case "typeDetails":
			out.Values[i] = ec._TaskBulletinTitleResponse_typeDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskBulletinUpsertResponseImplementors = []string{"TaskBulletinUpsertResponse"}

func (ec *executionContext) _TaskBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TaskBulletinUpsertResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskBulletinUpsertResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskBulletinUpsertResponse")
		case "error":
			out.Values[i] = ec._TaskBulletinUpsertResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._TaskBulletinUpsertResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationErrors":
			out.Values[i] = ec._TaskBulletinUpsertResponse_validationErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskReportOutputImplementors = []string{"TaskReportOutput"}

func (ec *executionContext) _TaskReportOutput(ctx context.Context, sel ast.SelectionSet, obj *model.TaskReportOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskReportOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskReportOutput")
		case "error":
			out.Values[i] = ec._TaskReportOutput_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._TaskReportOutput_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._TaskReportOutput_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._TaskReportOutput_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamMemberDropdownImplementors = []string{"TeamMemberDropdown"}

func (ec *executionContext) _TeamMemberDropdown(ctx context.Context, sel ast.SelectionSet, obj *model.TeamMemberDropdown) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamMemberDropdownImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamMemberDropdown")
		case "teamId":
			out.Values[i] = ec._TeamMemberDropdown_teamId(ctx, field, obj)
		case "teamName":
			out.Values[i] = ec._TeamMemberDropdown_teamName(ctx, field, obj)
		case "employee":
			out.Values[i] = ec._TeamMemberDropdown_employee(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamsImplementors = []string{"Teams"}

func (ec *executionContext) _Teams(ctx context.Context, sel ast.SelectionSet, obj *model.Teams) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Teams")
		case "teamID":
			out.Values[i] = ec._Teams_teamID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamName":
			out.Values[i] = ec._Teams_teamName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customers":
			out.Values[i] = ec._Teams_customers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weeklyFeedbackImplementors = []string{"WeeklyFeedback"}

func (ec *executionContext) _WeeklyFeedback(ctx context.Context, sel ast.SelectionSet, obj *model.WeeklyFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weeklyFeedbackImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeeklyFeedback")
		case "weekNumber":
			out.Values[i] = ec._WeeklyFeedback_weekNumber(ctx, field, obj)
		case "weekDateValue":
			out.Values[i] = ec._WeeklyFeedback_weekDateValue(ctx, field, obj)
		case "status":
			out.Values[i] = ec._WeeklyFeedback_status(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._WeeklyFeedback_remarks(ctx, field, obj)
		case "attachments":
			out.Values[i] = ec._WeeklyFeedback_attachments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerFeedbackImplementors = []string{"customerFeedback"}

func (ec *executionContext) _customerFeedback(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerFeedbackImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("customerFeedback")
		case "statusTitle":
			out.Values[i] = ec._customerFeedback_statusTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "statusValue":
			out.Values[i] = ec._customerFeedback_statusValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._customerFeedback_remarks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateCreated":
			out.Values[i] = ec._customerFeedback_dateCreated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachments":
			out.Values[i] = ec._customerFeedback_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerResponseImplementors = []string{"customerResponse"}

func (ec *executionContext) _customerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("customerResponse")
		case "custoMerId":
			out.Values[i] = ec._customerResponse_custoMerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "custoMerName":
			out.Values[i] = ec._customerResponse_custoMerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "soldTo":
			out.Values[i] = ec._customerResponse_soldTo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shipTo":
			out.Values[i] = ec._customerResponse_shipTo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fetchCustomerFeedbackResponseImplementors = []string{"fetchCustomerFeedbackResponse"}

func (ec *executionContext) _fetchCustomerFeedbackResponse(ctx context.Context, sel ast.SelectionSet, obj *model.FetchCustomerFeedbackResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fetchCustomerFeedbackResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("fetchCustomerFeedbackResponse")
		case "error":
			out.Values[i] = ec._fetchCustomerFeedbackResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._fetchCustomerFeedbackResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerFeedback":
			out.Values[i] = ec._fetchCustomerFeedbackResponse_customerFeedback(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var flashBulletinImplementors = []string{"flashBulletin"}

func (ec *executionContext) _flashBulletin(ctx context.Context, sel ast.SelectionSet, obj *model.FlashBulletin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashBulletinImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("flashBulletin")
		case "id":
			out.Values[i] = ec._flashBulletin_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._flashBulletin_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._flashBulletin_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._flashBulletin_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validityDate":
			out.Values[i] = ec._flashBulletin_validityDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachments":
			out.Values[i] = ec._flashBulletin_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipients":
			out.Values[i] = ec._flashBulletin_recipients(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var flashBulletinDataImplementors = []string{"flashBulletinData"}

func (ec *executionContext) _flashBulletinData(ctx context.Context, sel ast.SelectionSet, obj *model.FlashBulletinData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashBulletinDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("flashBulletinData")
		case "id":
			out.Values[i] = ec._flashBulletinData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._flashBulletinData_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._flashBulletinData_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._flashBulletinData_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startDate":
			out.Values[i] = ec._flashBulletinData_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endDate":
			out.Values[i] = ec._flashBulletinData_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._flashBulletinData_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDate":
			out.Values[i] = ec._flashBulletinData_createdDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedDate":
			out.Values[i] = ec._flashBulletinData_modifiedDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachments":
			out.Values[i] = ec._flashBulletinData_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var flashBulletinResponseImplementors = []string{"flashBulletinResponse"}

func (ec *executionContext) _flashBulletinResponse(ctx context.Context, sel ast.SelectionSet, obj *model.FlashBulletinResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashBulletinResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("flashBulletinResponse")
		case "error":
			out.Values[i] = ec._flashBulletinResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._flashBulletinResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationErrors":
			out.Values[i] = ec._flashBulletinResponse_validationErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var flashBulletinUpsertResponseImplementors = []string{"flashBulletinUpsertResponse"}

func (ec *executionContext) _flashBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, obj *model.FlashBulletinUpsertResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashBulletinUpsertResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("flashBulletinUpsertResponse")
		case "error":
			out.Values[i] = ec._flashBulletinUpsertResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._flashBulletinUpsertResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationErrors":
			out.Values[i] = ec._flashBulletinUpsertResponse_validationErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kpiResponseImplementors = []string{"kpiResponse"}

func (ec *executionContext) _kpiResponse(ctx context.Context, sel ast.SelectionSet, obj *model.KpiResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kpiResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("kpiResponse")
		case "error":
			out.Values[i] = ec._kpiResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._kpiResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._kpiResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationErrors":
			out.Values[i] = ec._kpiResponse_validationErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listFlashBulletinResponseImplementors = []string{"listFlashBulletinResponse"}

func (ec *executionContext) _listFlashBulletinResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ListFlashBulletinResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listFlashBulletinResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("listFlashBulletinResponse")
		case "error":
			out.Values[i] = ec._listFlashBulletinResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._listFlashBulletinResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flashBulletins":
			out.Values[i] = ec._listFlashBulletinResponse_flashBulletins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listTaskBulletinResponseImplementors = []string{"listTaskBulletinResponse"}

func (ec *executionContext) _listTaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ListTaskBulletinResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listTaskBulletinResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("listTaskBulletinResponse")
		case "error":
			out.Values[i] = ec._listTaskBulletinResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._listTaskBulletinResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalPages":
			out.Values[i] = ec._listTaskBulletinResponse_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskBulletins":
			out.Values[i] = ec._listTaskBulletinResponse_taskBulletins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var principalDropDownDataImplementors = []string{"principalDropDownData"}

func (ec *executionContext) _principalDropDownData(ctx context.Context, sel ast.SelectionSet, obj *model.PrincipalDropDownData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, principalDropDownDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("principalDropDownData")
		case "principalName":
			out.Values[i] = ec._principalDropDownData_principalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var retriveInfoFlashBulletinleResponseImplementors = []string{"retriveInfoFlashBulletinleResponse"}

func (ec *executionContext) _retriveInfoFlashBulletinleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RetriveInfoFlashBulletinleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, retriveInfoFlashBulletinleResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("retriveInfoFlashBulletinleResponse")
		case "error":
			out.Values[i] = ec._retriveInfoFlashBulletinleResponse_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._retriveInfoFlashBulletinleResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flashBulletinData":
			out.Values[i] = ec._retriveInfoFlashBulletinleResponse_flashBulletinData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskBulletinDataImplementors = []string{"taskBulletinData"}

func (ec *executionContext) _taskBulletinData(ctx context.Context, sel ast.SelectionSet, obj *model.TaskBulletinData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskBulletinDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("taskBulletinData")
		case "id":
			out.Values[i] = ec._taskBulletinData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creationDate":
			out.Values[i] = ec._taskBulletinData_creationDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetDate":
			out.Values[i] = ec._taskBulletinData_targetDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "typeTitle":
			out.Values[i] = ec._taskBulletinData_typeTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "typeValue":
			out.Values[i] = ec._taskBulletinData_typeValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "principalName":
			out.Values[i] = ec._taskBulletinData_principalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamId":
			out.Values[i] = ec._taskBulletinData_teamId(ctx, field, obj)
		case "teamName":
			out.Values[i] = ec._taskBulletinData_teamName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._taskBulletinData_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._taskBulletinData_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salesRep":
			out.Values[i] = ec._taskBulletinData_salesRep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachments":
			out.Values[i] = ec._taskBulletinData_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskReportImplementors = []string{"taskReport"}

func (ec *executionContext) _taskReport(ctx context.Context, sel ast.SelectionSet, obj *model.TaskReport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskReportImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("taskReport")
		case "bulletinTitle":
			out.Values[i] = ec._taskReport_bulletinTitle(ctx, field, obj)
		case "bulletinType":
			out.Values[i] = ec._taskReport_bulletinType(ctx, field, obj)
		case "principalName":
			out.Values[i] = ec._taskReport_principalName(ctx, field, obj)
		case "customerName":
			out.Values[i] = ec._taskReport_customerName(ctx, field, obj)
		case "teamName":
			out.Values[i] = ec._taskReport_teamName(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._taskReport_userName(ctx, field, obj)
		case "activeDirectory":
			out.Values[i] = ec._taskReport_activeDirectory(ctx, field, obj)
		case "creationDate":
			out.Values[i] = ec._taskReport_creationDate(ctx, field, obj)
		case "targetDate":
			out.Values[i] = ec._taskReport_targetDate(ctx, field, obj)
		case "weeklyFeedback":
			out.Values[i] = ec._taskReport_weeklyFeedback(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var titleValueImplementors = []string{"titleValue"}

func (ec *executionContext) _titleValue(ctx context.Context, sel ast.SelectionSet, obj *model.TitleValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, titleValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("titleValue")
		case "type":
			out.Values[i] = ec._titleValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationMessageImplementors = []string{"validationMessage"}

func (ec *executionContext) _validationMessage(ctx context.Context, sel ast.SelectionSet, obj *model.ValidationMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("validationMessage")
		case "row":
			out.Values[i] = ec._validationMessage_row(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._validationMessage_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._validationMessage_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var validationResultImplementors = []string{"validationResult"}

func (ec *executionContext) _validationResult(ctx context.Context, sel ast.SelectionSet, obj *model.ValidationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, validationResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("validationResult")
		case "error":
			out.Values[i] = ec._validationResult_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationTimeTaken":
			out.Values[i] = ec._validationResult_validationTimeTaken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "validationMessage":
			out.Values[i] = ec._validationResult_validationMessage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActionKPITargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐActionKPITargetInput(ctx context.Context, v interface{}) (model.ActionKPITargetInput, error) {
	res, err := ec.unmarshalInputActionKPITargetInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Attachment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttachment2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAttachment2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *model.Attachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAttachmentUpsertInput2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentUpsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AttachmentUpsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AttachmentUpsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNAttachmentUpsertInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentUpsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAttachmentUpsertInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachmentUpsertInput(ctx context.Context, v interface{}) (*model.AttachmentUpsertInput, error) {
	res, err := ec.unmarshalInputAttachmentUpsertInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBrandList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandListᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BrandList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBrandList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBrandList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandList(ctx context.Context, sel ast.SelectionSet, v *model.BrandList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BrandList(ctx, sel, v)
}

func (ec *executionContext) marshalNBrandListResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandListResponse(ctx context.Context, sel ast.SelectionSet, v model.BrandListResponse) graphql.Marshaler {
	return ec._BrandListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNBrandListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐBrandListResponse(ctx context.Context, sel ast.SelectionSet, v *model.BrandListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BrandListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomer2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomer(ctx context.Context, sel ast.SelectionSet, v model.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerContact2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerContact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomerContact2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCustomerContact2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContact(ctx context.Context, sel ast.SelectionSet, v *model.CustomerContact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerContactDeleteRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactDeleteRequest(ctx context.Context, v interface{}) (model.CustomerContactDeleteRequest, error) {
	res, err := ec.unmarshalInputCustomerContactDeleteRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerContactRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerContactRequest(ctx context.Context, v interface{}) (model.CustomerContactRequest, error) {
	res, err := ec.unmarshalInputCustomerContactRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerGroup2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomerGroup2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCustomerGroup2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroup(ctx context.Context, sel ast.SelectionSet, v *model.CustomerGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerGroupResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupResponse(ctx context.Context, sel ast.SelectionSet, v model.CustomerGroupResponse) graphql.Marshaler {
	return ec._CustomerGroupResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerGroupResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupResponse(ctx context.Context, sel ast.SelectionSet, v *model.CustomerGroupResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerGroupResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerListᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomerList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCustomerList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerList(ctx context.Context, sel ast.SelectionSet, v *model.CustomerList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerList(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerListResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerListResponse(ctx context.Context, sel ast.SelectionSet, v model.CustomerListResponse) graphql.Marshaler {
	return ec._CustomerListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerListResponse(ctx context.Context, sel ast.SelectionSet, v *model.CustomerListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerListResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerTargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTargetInput(ctx context.Context, v interface{}) (model.CustomerTargetInput, error) {
	res, err := ec.unmarshalInputCustomerTargetInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerTaskFeedBackInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTaskFeedBackInput(ctx context.Context, v interface{}) (model.CustomerTaskFeedBackInput, error) {
	res, err := ec.unmarshalInputCustomerTaskFeedBackInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerTaskFeedBackResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTaskFeedBackResponse(ctx context.Context, sel ast.SelectionSet, v model.CustomerTaskFeedBackResponse) graphql.Marshaler {
	return ec._CustomerTaskFeedBackResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerTaskFeedBackResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerTaskFeedBackResponse(ctx context.Context, sel ast.SelectionSet, v *model.CustomerTaskFeedBackResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerTaskFeedBackResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGetBrandProductRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetBrandProductRequest(ctx context.Context, v interface{}) (model.GetBrandProductRequest, error) {
	res, err := ec.unmarshalInputGetBrandProductRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetCustomerContactResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetCustomerContactResponse(ctx context.Context, sel ast.SelectionSet, v model.GetCustomerContactResponse) graphql.Marshaler {
	return ec._GetCustomerContactResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetCustomerContactResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetCustomerContactResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetCustomerContactResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetCustomerContactResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpi2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetKpi) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetKpi2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpi(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGetKpi2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpi(ctx context.Context, sel ast.SelectionSet, v *model.GetKpi) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpi(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpiAnswerResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiAnswerResponse(ctx context.Context, sel ast.SelectionSet, v model.GetKpiAnswerResponse) graphql.Marshaler {
	return ec._GetKpiAnswerResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetKpiAnswerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiAnswerResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetKpiAnswerResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpiAnswerResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpiBrandProductResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiBrandProductResponse(ctx context.Context, sel ast.SelectionSet, v model.GetKpiBrandProductResponse) graphql.Marshaler {
	return ec._GetKpiBrandProductResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetKpiBrandProductResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiBrandProductResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetKpiBrandProductResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpiBrandProductResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpiOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiOfflineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetKpiOffline) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetKpiOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiOffline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGetKpiOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiOffline(ctx context.Context, sel ast.SelectionSet, v *model.GetKpiOffline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpiOffline(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpiResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiResponse(ctx context.Context, sel ast.SelectionSet, v model.GetKpiResponse) graphql.Marshaler {
	return ec._GetKpiResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetKpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetKpiResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpiResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNGetKpiTargetResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiTargetResponse(ctx context.Context, sel ast.SelectionSet, v model.GetKpiTargetResponse) graphql.Marshaler {
	return ec._GetKpiTargetResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetKpiTargetResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiTargetResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetKpiTargetResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetKpiTargetResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetTargetCustomerRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetTargetCustomerRequest(ctx context.Context, v interface{}) (model.GetTargetCustomerRequest, error) {
	res, err := ec.unmarshalInputGetTargetCustomerRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNGetTargetCustomerResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetTargetCustomerResponse(ctx context.Context, sel ast.SelectionSet, v model.GetTargetCustomerResponse) graphql.Marshaler {
	return ec._GetTargetCustomerResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetTargetCustomerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetTargetCustomerResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetTargetCustomerResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetTargetCustomerResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNImages2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐImages(ctx context.Context, sel ast.SelectionSet, v model.Images) graphql.Marshaler {
	return ec._Images(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKPI2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIᚄ(ctx context.Context, v interface{}) ([]*model.KPI, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.KPI, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNKPI2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPI(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNKPI2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPI(ctx context.Context, v interface{}) (*model.KPI, error) {
	res, err := ec.unmarshalInputKPI(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKPIAnswerRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerRes(ctx context.Context, sel ast.SelectionSet, v model.KPIAnswerRes) graphql.Marshaler {
	return ec._KPIAnswerRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNKPIAnswerRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerResᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KPIAnswerRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKPIAnswerRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNKPIAnswerStruct2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerStructᚄ(ctx context.Context, v interface{}) ([]*model.KPIAnswerStruct, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.KPIAnswerStruct, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNKPIAnswerStruct2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerStruct(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNKPIAnswerStruct2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIAnswerStruct(ctx context.Context, v interface{}) (*model.KPIAnswerStruct, error) {
	res, err := ec.unmarshalInputKPIAnswerStruct(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKPIDesignRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignRes(ctx context.Context, sel ast.SelectionSet, v model.KPIDesignRes) graphql.Marshaler {
	return ec._KPIDesignRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNKPIDesignRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KPIDesignRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKPIDesignRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKPIDesignRes2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignResᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KPIDesignRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKPIDesignRes2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKPIDesignRes2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIDesignRes(ctx context.Context, sel ast.SelectionSet, v *model.KPIDesignRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KPIDesignRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalNKPIQuestion2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionᚄ(ctx context.Context, v interface{}) ([]*model.KPIQuestion, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.KPIQuestion, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNKPIQuestion2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestion(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNKPIQuestion2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestion(ctx context.Context, v interface{}) (*model.KPIQuestion, error) {
	res, err := ec.unmarshalInputKPIQuestion(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKPIQuestionRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionRes(ctx context.Context, sel ast.SelectionSet, v model.KPIQuestionRes) graphql.Marshaler {
	return ec._KPIQuestionRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNKPIQuestionRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionResᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KPIQuestionRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKPIQuestionRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPIQuestionRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNKPITargetInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargetInput(ctx context.Context, v interface{}) (model.KPITargetInput, error) {
	res, err := ec.unmarshalInputKPITargetInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNKPITargets2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargetsᚄ(ctx context.Context, v interface{}) ([]*model.KPITargets, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.KPITargets, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNKPITargets2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargets(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNKPITargets2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKPITargets(ctx context.Context, v interface{}) (*model.KPITargets, error) {
	res, err := ec.unmarshalInputKPITargets(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKpiAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiAnswer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiAnswer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiAnswer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswer(ctx context.Context, sel ast.SelectionSet, v *model.KpiAnswer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiAnswer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNKpiAnswerRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiAnswerRequest(ctx context.Context, v interface{}) (model.KpiAnswerRequest, error) {
	res, err := ec.unmarshalInputKpiAnswerRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKpiBrandItem2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiBrandItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiBrandItem2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiBrandItem2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItem(ctx context.Context, sel ast.SelectionSet, v *model.KpiBrandItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiBrandItem(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiBrandItemOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemOfflineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiBrandItemOffline) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiBrandItemOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemOffline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiBrandItemOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiBrandItemOffline(ctx context.Context, sel ast.SelectionSet, v *model.KpiBrandItemOffline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiBrandItemOffline(ctx, sel, v)
}

func (ec *executionContext) unmarshalNKpiOfflineInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiOfflineInput(ctx context.Context, v interface{}) (model.KpiOfflineInput, error) {
	res, err := ec.unmarshalInputKpiOfflineInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNKpiOfflineResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiOfflineResponse(ctx context.Context, sel ast.SelectionSet, v model.KpiOfflineResponse) graphql.Marshaler {
	return ec._KpiOfflineResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNKpiOfflineResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiOfflineResponse(ctx context.Context, sel ast.SelectionSet, v *model.KpiOfflineResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiOfflineResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiProductBrandAnswer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductBrandAnswerᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiProductBrandAnswer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiProductBrandAnswer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductBrandAnswer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiProductBrandAnswer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductBrandAnswer(ctx context.Context, sel ast.SelectionSet, v *model.KpiProductBrandAnswer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiProductBrandAnswer(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiProductItem2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiProductItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiProductItem2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiProductItem2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItem(ctx context.Context, sel ast.SelectionSet, v *model.KpiProductItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiProductItem(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiProductItemOffline2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemOfflineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiProductItemOffline) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiProductItemOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemOffline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiProductItemOffline2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiProductItemOffline(ctx context.Context, sel ast.SelectionSet, v *model.KpiProductItemOffline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiProductItemOffline(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiTarget2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiTarget) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiTarget2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTarget(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiTarget2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTarget(ctx context.Context, sel ast.SelectionSet, v *model.KpiTarget) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiTarget(ctx, sel, v)
}

func (ec *executionContext) marshalNKpiTargetRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetRes(ctx context.Context, sel ast.SelectionSet, v model.KpiTargetRes) graphql.Marshaler {
	return ec._KpiTargetRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNKpiTargetRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetResᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KpiTargetRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiTargetRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiTargetTitle2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetTitleᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KpiTargetTitle) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKpiTargetTitle2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetTitle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNKpiTargetTitle2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTargetTitle(ctx context.Context, sel ast.SelectionSet, v *model.KpiTargetTitle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KpiTargetTitle(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPictureZipInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPictureZipInput(ctx context.Context, v interface{}) (model.PictureZipInput, error) {
	res, err := ec.unmarshalInputPictureZipInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNPicturesInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPicturesInput(ctx context.Context, v interface{}) (model.PicturesInput, error) {
	res, err := ec.unmarshalInputPicturesInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNPrincipalDropDownInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownInput(ctx context.Context, v interface{}) (model.PrincipalDropDownInput, error) {
	res, err := ec.unmarshalInputPrincipalDropDownInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNPrincipalDropDownResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownResponse(ctx context.Context, sel ast.SelectionSet, v model.PrincipalDropDownResponse) graphql.Marshaler {
	return ec._PrincipalDropDownResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrincipalDropDownResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownResponse(ctx context.Context, sel ast.SelectionSet, v *model.PrincipalDropDownResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PrincipalDropDownResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNProductList2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductListᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductList2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductList(ctx context.Context, sel ast.SelectionSet, v *model.ProductList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductList(ctx, sel, v)
}

func (ec *executionContext) marshalNProductListResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductListResponse(ctx context.Context, sel ast.SelectionSet, v model.ProductListResponse) graphql.Marshaler {
	return ec._ProductListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductListResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐProductListResponse(ctx context.Context, sel ast.SelectionSet, v *model.ProductListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipients2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRecipientsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Recipients) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipients2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRecipients(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipients2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRecipients(ctx context.Context, sel ast.SelectionSet, v *model.Recipients) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Recipients(ctx, sel, v)
}

func (ec *executionContext) marshalNRetrievePictureZip2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePictureZip(ctx context.Context, sel ast.SelectionSet, v model.RetrievePictureZip) graphql.Marshaler {
	return ec._RetrievePictureZip(ctx, sel, &v)
}

func (ec *executionContext) marshalNRetrievePictureZip2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePictureZip(ctx context.Context, sel ast.SelectionSet, v *model.RetrievePictureZip) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RetrievePictureZip(ctx, sel, v)
}

func (ec *executionContext) marshalNRetrievePicturesResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePicturesResponse(ctx context.Context, sel ast.SelectionSet, v model.RetrievePicturesResponse) graphql.Marshaler {
	return ec._RetrievePicturesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNRetrievePicturesResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetrievePicturesResponse(ctx context.Context, sel ast.SelectionSet, v *model.RetrievePicturesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RetrievePicturesResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSalesRepData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SalesRepData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSalesRepData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSalesRepData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepData(ctx context.Context, sel ast.SelectionSet, v *model.SalesRepData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SalesRepData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTargetCustomer2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetCustomer(ctx context.Context, sel ast.SelectionSet, v []*model.TargetCustomer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTargetCustomer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTargetValueRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValueRes(ctx context.Context, sel ast.SelectionSet, v model.TargetValueRes) graphql.Marshaler {
	return ec._TargetValueRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNTargetValueRes2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValueResᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TargetValueRes) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTargetValueRes2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValueRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNTargetValues2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValuesᚄ(ctx context.Context, v interface{}) ([]*model.TargetValues, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.TargetValues, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNTargetValues2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValues(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNTargetValues2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetValues(ctx context.Context, v interface{}) (*model.TargetValues, error) {
	res, err := ec.unmarshalInputTargetValues(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNTaskBulletinReportInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinReportInput(ctx context.Context, v interface{}) (model.TaskBulletinReportInput, error) {
	res, err := ec.unmarshalInputTaskBulletinReportInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNTaskBulletinResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, v model.TaskBulletinResponse) graphql.Marshaler {
	return ec._TaskBulletinResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, v *model.TaskBulletinResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TaskBulletinResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskBulletinTitleResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinTitleResponse(ctx context.Context, sel ast.SelectionSet, v model.TaskBulletinTitleResponse) graphql.Marshaler {
	return ec._TaskBulletinTitleResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskBulletinTitleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinTitleResponse(ctx context.Context, sel ast.SelectionSet, v *model.TaskBulletinTitleResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TaskBulletinTitleResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskBulletinUpsertInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinUpsertInput(ctx context.Context, v interface{}) (model.TaskBulletinUpsertInput, error) {
	res, err := ec.unmarshalInputTaskBulletinUpsertInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNTaskBulletinUpsertResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, v model.TaskBulletinUpsertResponse) graphql.Marshaler {
	return ec._TaskBulletinUpsertResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskBulletinUpsertResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, v *model.TaskBulletinUpsertResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TaskBulletinUpsertResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskReportOutput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReportOutput(ctx context.Context, sel ast.SelectionSet, v model.TaskReportOutput) graphql.Marshaler {
	return ec._TaskReportOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskReportOutput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReportOutput(ctx context.Context, sel ast.SelectionSet, v *model.TaskReportOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TaskReportOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamMemberDropdown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamMemberDropdown(ctx context.Context, sel ast.SelectionSet, v []*model.TeamMemberDropdown) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTeamMemberDropdown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamMemberDropdown(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTeams2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeams(ctx context.Context, sel ast.SelectionSet, v model.Teams) graphql.Marshaler {
	return ec._Teams(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeams2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamsᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Teams) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeams2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeams(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNUpsertKpiRequest2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐUpsertKpiRequest(ctx context.Context, v interface{}) (model.UpsertKpiRequest, error) {
	res, err := ec.unmarshalInputUpsertKpiRequest(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNcustomerFeedback2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerFeedbackᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerFeedback) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNcustomerFeedback2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNcustomerFeedback2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerFeedback(ctx context.Context, sel ast.SelectionSet, v *model.CustomerFeedback) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._customerFeedback(ctx, sel, v)
}

func (ec *executionContext) marshalNcustomerResponse2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNcustomerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNcustomerResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerResponse(ctx context.Context, sel ast.SelectionSet, v *model.CustomerResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._customerResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNfetchCustomerFeedbackInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFetchCustomerFeedbackInput(ctx context.Context, v interface{}) (model.FetchCustomerFeedbackInput, error) {
	res, err := ec.unmarshalInputfetchCustomerFeedbackInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNfetchCustomerFeedbackResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFetchCustomerFeedbackResponse(ctx context.Context, sel ast.SelectionSet, v model.FetchCustomerFeedbackResponse) graphql.Marshaler {
	return ec._fetchCustomerFeedbackResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNfetchCustomerFeedbackResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFetchCustomerFeedbackResponse(ctx context.Context, sel ast.SelectionSet, v *model.FetchCustomerFeedbackResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._fetchCustomerFeedbackResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNflashBulletinData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FlashBulletinData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNflashBulletinData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNflashBulletinData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinData(ctx context.Context, sel ast.SelectionSet, v *model.FlashBulletinData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._flashBulletinData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNflashBulletinUpsertInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinUpsertInput(ctx context.Context, v interface{}) (model.FlashBulletinUpsertInput, error) {
	res, err := ec.unmarshalInputflashBulletinUpsertInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNflashBulletinUpsertResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, v model.FlashBulletinUpsertResponse) graphql.Marshaler {
	return ec._flashBulletinUpsertResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNflashBulletinUpsertResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletinUpsertResponse(ctx context.Context, sel ast.SelectionSet, v *model.FlashBulletinUpsertResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._flashBulletinUpsertResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNkpiResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx context.Context, sel ast.SelectionSet, v model.KpiResponse) graphql.Marshaler {
	return ec._kpiResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNkpiResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiResponse(ctx context.Context, sel ast.SelectionSet, v *model.KpiResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._kpiResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNlistFlashBulletinInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListFlashBulletinInput(ctx context.Context, v interface{}) (model.ListFlashBulletinInput, error) {
	res, err := ec.unmarshalInputlistFlashBulletinInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNlistFlashBulletinResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListFlashBulletinResponse(ctx context.Context, sel ast.SelectionSet, v model.ListFlashBulletinResponse) graphql.Marshaler {
	return ec._listFlashBulletinResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNlistFlashBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListFlashBulletinResponse(ctx context.Context, sel ast.SelectionSet, v *model.ListFlashBulletinResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._listFlashBulletinResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNlistTaskBulletinResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListTaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, v model.ListTaskBulletinResponse) graphql.Marshaler {
	return ec._listTaskBulletinResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNlistTaskBulletinResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListTaskBulletinResponse(ctx context.Context, sel ast.SelectionSet, v *model.ListTaskBulletinResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._listTaskBulletinResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNprincipalDropDownData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownData(ctx context.Context, sel ast.SelectionSet, v []*model.PrincipalDropDownData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOprincipalDropDownData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNretriveInfoFlashBulletinInput2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetriveInfoFlashBulletinInput(ctx context.Context, v interface{}) (model.RetriveInfoFlashBulletinInput, error) {
	res, err := ec.unmarshalInputretriveInfoFlashBulletinInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNretriveInfoFlashBulletinleResponse2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetriveInfoFlashBulletinleResponse(ctx context.Context, sel ast.SelectionSet, v model.RetriveInfoFlashBulletinleResponse) graphql.Marshaler {
	return ec._retriveInfoFlashBulletinleResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNretriveInfoFlashBulletinleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐRetriveInfoFlashBulletinleResponse(ctx context.Context, sel ast.SelectionSet, v *model.RetriveInfoFlashBulletinleResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._retriveInfoFlashBulletinleResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNtaskBulletinData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaskBulletinData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNtaskBulletinData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNtaskBulletinData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinData(ctx context.Context, sel ast.SelectionSet, v *model.TaskBulletinData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._taskBulletinData(ctx, sel, v)
}

func (ec *executionContext) marshalNtitleValue2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTitleValueᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TitleValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNtitleValue2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTitleValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNtitleValue2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTitleValue(ctx context.Context, sel ast.SelectionSet, v *model.TitleValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._titleValue(ctx, sel, v)
}

func (ec *executionContext) marshalOAttachment2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v []*model.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttachment2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAttachment2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *model.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCustomer2ᚕgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2githubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCustomerData2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerData(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCustomerData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCustomerData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerData(ctx context.Context, sel ast.SelectionSet, v *model.CustomerData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerData(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerDataDropDown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerDataDropDown(ctx context.Context, sel ast.SelectionSet, v []*model.CustomerDataDropDown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCustomerDataDropDown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerDataDropDown(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCustomerDataDropDown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerDataDropDown(ctx context.Context, sel ast.SelectionSet, v *model.CustomerDataDropDown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerDataDropDown(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomerGroupInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐCustomerGroupInput(ctx context.Context, v interface{}) (*model.CustomerGroupInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomerGroupInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOGetCustomerContactRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetCustomerContactRequest(ctx context.Context, v interface{}) (*model.GetCustomerContactRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetCustomerContactRequest(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOGetKpiAnswerRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiAnswerRequest(ctx context.Context, v interface{}) (*model.GetKpiAnswerRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetKpiAnswerRequest(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOGetKpiTargetRequest2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiTargetRequest(ctx context.Context, v interface{}) (*model.GetKpiTargetRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetKpiTargetRequest(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOKpiTaregetTitleResponse2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐKpiTaregetTitleResponse(ctx context.Context, sel ast.SelectionSet, v *model.KpiTaregetTitleResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._KpiTaregetTitleResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOListInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListInput(ctx context.Context, v interface{}) (*model.ListInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputListInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOSalesRepDataDropDown2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataDropDown(ctx context.Context, sel ast.SelectionSet, v []*model.SalesRepDataDropDown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSalesRepDataDropDown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataDropDown(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSalesRepDataDropDown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐSalesRepDataDropDown(ctx context.Context, sel ast.SelectionSet, v *model.SalesRepDataDropDown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SalesRepDataDropDown(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTarget2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTarget(ctx context.Context, sel ast.SelectionSet, v []*model.Target) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTarget2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTarget(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTarget2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTarget(ctx context.Context, sel ast.SelectionSet, v *model.Target) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Target(ctx, sel, v)
}

func (ec *executionContext) marshalOTargetCustomer2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTargetCustomer(ctx context.Context, sel ast.SelectionSet, v *model.TargetCustomer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TargetCustomer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTaskBulletinInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinInput(ctx context.Context, v interface{}) (*model.TaskBulletinInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaskBulletinInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOTaskBulletinTitleInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskBulletinTitleInput(ctx context.Context, v interface{}) (*model.TaskBulletinTitleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaskBulletinTitleInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOTeamMemberDropdown2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTeamMemberDropdown(ctx context.Context, sel ast.SelectionSet, v *model.TeamMemberDropdown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TeamMemberDropdown(ctx, sel, v)
}

func (ec *executionContext) marshalOWeeklyFeedback2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐWeeklyFeedback(ctx context.Context, sel ast.SelectionSet, v []*model.WeeklyFeedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWeeklyFeedback2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐWeeklyFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOWeeklyFeedback2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐWeeklyFeedback(ctx context.Context, sel ast.SelectionSet, v *model.WeeklyFeedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WeeklyFeedback(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOattachments2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachments(ctx context.Context, v interface{}) ([]*model.Attachments, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Attachments, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOattachments2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachments(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOattachments2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐAttachments(ctx context.Context, v interface{}) (*model.Attachments, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputattachments(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOflashBulletin2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐFlashBulletin(ctx context.Context, sel ast.SelectionSet, v *model.FlashBulletin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._flashBulletin(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgetKpiInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐGetKpiInput(ctx context.Context, v interface{}) (*model.GetKpiInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgetKpiInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOlistTaskBulletinInput2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐListTaskBulletinInput(ctx context.Context, v interface{}) (*model.ListTaskBulletinInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlistTaskBulletinInput(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOprincipalDropDownData2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐPrincipalDropDownData(ctx context.Context, sel ast.SelectionSet, v *model.PrincipalDropDownData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._principalDropDownData(ctx, sel, v)
}

func (ec *executionContext) marshalOtaskReport2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReport(ctx context.Context, sel ast.SelectionSet, v []*model.TaskReport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOtaskReport2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOtaskReport2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐTaskReport(ctx context.Context, sel ast.SelectionSet, v *model.TaskReport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._taskReport(ctx, sel, v)
}

func (ec *executionContext) marshalOvalidationMessage2ᚕᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx context.Context, sel ast.SelectionSet, v []*model.ValidationMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOvalidationMessage2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOvalidationMessage2ᚖgithubᚗcomᚋeztradeᚋkpiᚋgraphᚋmodelᚐValidationMessage(ctx context.Context, sel ast.SelectionSet, v *model.ValidationMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._validationMessage(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
